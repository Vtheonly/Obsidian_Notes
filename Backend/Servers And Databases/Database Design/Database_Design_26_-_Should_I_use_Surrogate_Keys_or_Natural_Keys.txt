hello everybody it's Caleb in this video I wanted to talk about uh the pros and cons of surrogate or natural keys so basically we're going to compare and contrast them here so over here on the left side we got surrogate and then over here on the right side we got some natural all right we're going to have a little battle here right we're going to figure out which one's the best let me just box this to keep this as out of here all right so what are some good things about natural Keys all right well first one of the first good things about that was really weak one of the first good things about natural Keys is that you don't have to Define any new data if you don't remember from the last video let me just redefine them here natural keys are used or columns used as your key that are already defined within your table they're natural to what you want to store surrogate keys are just kind of added like a user ID or a uh car ID or a credit card ID or a comet ID they're surate they have no real world meaning so natural not natural get it cool so some good things about natural is you don't actually have to Define any new data any new data I don't know if you could hear me there or not kind of stuttered on that but anyways uh you don't really have to Define any new data because it's already within your table and you can use that as your natural key so you're required to store less information in your database so you get smaller dat you get you have a smaller database right so that's one good thing uh so what's a downside to Natural keys well a downside is that sometimes you're not going to be able to find a really good natural key because if you look over here we want our keys to be unique never changing and never empty or null well if we have a natural key key we have to find one that fits all three of these and it has to be a good one that would make sense to use as a as a natural key like you might not want to use a combination of 20 columns to make natural key right but that's one of the downsides to Natural key is you have to figure out what natural key to use and there's not always a great option uh now optimally you should have a natural key or at least something that could be used is a natural key within every table to uh best to have the best design to ensure uniqueness not just by a surrogate key if you use one but by naturally what's being stored so like just for an example if we have a comments table we could have a comment by a certain user on a certain web page or whatever and uh what what forces it to be unique well the combination of that as well as the date it's posted or the the time it's posted that's going to be unique because you can't have two comments from the same user at the same time on the same web page it's not possible right I mean unless you like glitch the system somehow which shouldn't happen well that's an example of using natural Keys uh the downside like I said you might not always be able to figure out what to use for your natural key that one was a good example because naturally we could figure out a natural key right follow me the other thing is natural Keys have real world values real world meaning right so you have connections to real world meaning so for example in the comments the actual comment in combination with the user who posted it in combination with the time it was posted and the page it was posted on or any of those four columns to be used as a natural key well those have real world meaning and as your database develops over time time the database application might change or be updated or new meaning is given to the database and what it's supposed to do that means that your natural Keys could change over time and have new uh new meaning or the uh actual values could change in some instances and we do not want that obviously because it has to be unique never changing and never null if for example we make it to where we do have to change the natural keys well that would kind of be like Crossing this out and that's possible like we could update the values of all the keys but that's going to require us to update all connections between tables and that's going to require a lot of resources from our server and that's just a bad design in general so those are most of the uh cons of natural Keys uh so yeah let's move on to surrogate right okay so surrogate keys well obviously the first downside is you have to add a column to your table no matter what even if you have a uh a uh for example if it's naturally unique well you might like if you have a comment from a username well that username is going to help ensure uniqueness and you still add a a surrogate key well then you're adding unnecessary data because you're adding a new column and you have to store all these numbers one of the pros of surrogate keys are is that they're typically numbers where often times natural keys can be words or anything like that that's good because typically numbers are easier to work with but not always now a couple other things besides the fact that you have to add a new data new column which requires you to store more data it's that uh it can be confusing sometimes and all you're working with is just combinations of numbers and we have like we have a column let's say like a commenter for a comment table and we just have an i we have the value like 7004 uh 7,462 well this kind of clear it's talking about the user with the ID of 74 7,462 sometimes columns won't be very descriptive though and that would be a fault in the designers so make sure you name your columns right but when working with other people you can sometimes get confused exactly what references what and you have to do a little bit more thinking and check the actual database structure the it's programmed or however else like that so that's a couple things that are confusing okay so now you're probably wondering okay so which one am I supposed to use well it actually it just depends on what you want to do if you prefer to use natural or surrogate keys but typically you'll want to pick one and use that throughout all of the database I said database really weird there I was like database I was like datab base rather than database so it's like database anyways uh so like say let's say I decide to use surrogate keys well that means every column should get a ID or at least a combination of IDs natural if I decide to use natural that means every column should try to be used as a natural key because if we mix and match sometimes we're going to have a surrogate key sometimes we're going to have a natural key and it's going to be super confusing and we're not going to know what's going on so typically you want to kind of keep one or the other the other thing is I don't know what the other thing was but uh yeah typically one or the other now for my sake I personally am going to use surrogate Keys although that's not saying that they're better in any way I just prefer surrogate keys because it's simple for me because every time I make a table I all I got to do is make an ID with a like if it's a user table all I got to do is make a column user ID and boom we're done that's all I gotta worry about and I don't really have to worry about uh it ever changing or ever becoming something different or anything it's just a random number 7,254 well that has no real world meaning now keep in mind though that if you do use surrogate Keys you shouldn't uh you shouldn't have them have any real world value so for example a student ID if we give these student IDs out to the students that's not really a good idea to use as the surrogate key because it's actually a natural key it has real world meaning so those are just some things and you can find tons and tons of stuff on the internet about natural vers surrogate Keys it's basically like a war between two database sides oh we're the natural Keys oh we're the surate keys I'm going to kill you boom you know what I mean so yeah don't freak out just figure out what works best for you there's some minor performance differences but I mean I I don't really know all of them so yeah believe it or not I don't know something I'm kidding but anyways try them both out if you want look up stuff look up um which one performs better or which one will work best for your application or your database because that's really what matters right so yeah peace out check you guys uh check this gosh I can't talk today check out my next video and I will see see you guys then and we'll be learning some other cool stuff so yeah see you guys then