hey what's up everybody welcome back to your database design Series in the last video we talked about designing onetoone relationships this video we'll be talking about designing one to many relationships first I want to bring back an example from the last video into this video so we can kind of explain the differences between one: one and one to many so in the last example we had a credit card company where a person is allowed to have only one card the one card can only be owned by one person let's draw that out we'll just draw the table and the uh columns within that table so we have two tables here we have the user table and then we have the card table this is when we store a onetoone relationship over multiple tables otherwise we could just store it as a column because I mean we're only storing one thing we have the user idid and then we have a card ID and then to connect these as a onetoone relationship we have a forign key so we put a connection the card ID in the user table the user ID in the card table so card ID user ID that that mean that what that does is connects these tables so the user ID to this user ID card ID to this card ID that is how we would make a one to one relationship over two tables then we can store other stuff about the user in this table other stuff about the card in this table now to convert this to a one to many we can change just something very small a one to many relationship would be saying one user can have many cards but a card specific card can only be owned by one user so there's no um a card can't be owned or co-signed or owned by two people now the way we do this because let me just erase these columns real quick let's it start from scratch so we have a user table and then we have a card table once again we need IDs for both of them so we have a user ID and then a card ID the user owns multiple cards and we don't know how many they own they they can have one they could have two they could have three they could have four they could have five so it wouldn't make sense to put the card ID in here as multiple columns because if we put five columns for card ID well then what if someone had six cards what are they going to do they're not they're not going to be able to have a sixth one so what we do is we put the user ID in the card table which points back to the user ID in this table so now if we made specific examples of this let's say we had this guy here let's give him a top hat yeah all right so we got this guy right here and his user ID is 63 just random generated number by the database well we also have cards over here so we have this credit card we have this credit card we're actually drawing our cards here so we have the BARC code and the name and the codes and all that crap and then we have this card over here we make a connection we want all of these to point back to this guy so we give it a user ID we could say the user ID 63 63 63 so now we know that each card is owned by the user with the ID of 63 which we can figure out is this guy whatever his name is we can join that so now we store a one to many relationship into table where the many side gets a foreign key to the single the one side and if you don't know about foreign Keys that's fine basically in simple terms a foreign key is just that that ID connection this user ID is a foreign key that points to the user ID in the main table foreign key points to the primary key in the primary table this is also said to be a child um I'm sorry a parent child relationship this would be the parent because every single child has to point back to the parent that is how we store a one to many relationship uh in a database so uh how would we know if we had this example we had um commment comment section on a shopping website so you're allowed to leave a a review yeah let's say you can leave a review and we had this table these this table set up we had the users and then we had the reviews and we had a an a user ID and then we had a review ID I just give that to every single table every T I give every table an ID then we have the username and then we have the actual review so the user has a username the review has the actual comment and we could also say we could say we have a review title so we could say like oh this review is this product sucks or this product is really awesome and then we can have a paragraph saying why the product's awesome for example right now this is not properly designed because there's no connection between the user and the review because if we look at the review table who who who posted the review it doesn't say all we have is the review ID the review and the review title it doesn't say who posted it so if we put a key a foreign key that points back to the user table that would say that is the parent the person who posted that review so we could have a user ID which points back to the user ID in the primary table is this a one toone relationship or is this a one to many relationship well this we could have multiple reviews and each one would point back so we could have um another review by and we could have the same ID let's just think of some examples let's say we have the review ID of six and then the review is awesome or good and it's by the user ID of 62 well then we could have another one with the review ID of seven and it could say great and then we could have it from the user ID 62 well these are both from the user ID 62 so we could say this is a on to many relationship because multiple reviews point back to one user if we wanted wanted it so a user can only post one review well then we need to put the review ID in the user table so now we have this sort of like this double connection thing here because this review ID connects it so it's saying only one review ID can be from the user and honestly this this could probably be improved because um the review is not necessarily connected to the user that directly for example of if the website is solely forgiving one review well then we could give it a review ID but that might not be the best example simply because the user might buy multiple products and each review could have a product ID you see so I mean it kind of gets complex and just kind of have to study but the review ID would probably be best to make it a one to many relationship because it wouldn't really make sense to have it as a one to one relationship we wanted it as a one to many because multiple reviews for multiple products can be given so this points to a product this points to a product this points to a product and they're all by a specific user all right so yeah that's just some basic uh design Concepts that you will need to understand now when you have a one to many relationship just store it over two tables and give a foreign key to the many side pointing back to the one side all right so sorry if that was com too complex or too confusing but I think as we go on it'll always make sense and I know I say that like like I'm a broken record or something but yeah seriously studying people like watch it and then they're like I don't get this this ah I quit well that's not how you learn like seriously when I was in school I never learned anything until two weeks after I took the test which I know is super frustrating because I could have learned it like two weeks earlier but studying it when I didn't understand it directly is what made me learn it and then I finally kind of got the concepts after a while so just keep learning keep watching and I will see you in the next video