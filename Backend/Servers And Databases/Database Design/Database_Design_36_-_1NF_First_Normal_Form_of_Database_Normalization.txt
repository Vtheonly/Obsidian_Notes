hey what's up everybody this video will be over the first normal form which is the first step in database normalization this normal form deals with data being Atomic or atomicity all right so let's begin let's first look at three examples where there are problems and then I'm going to explain a solution if we take a look at this first example we have a user ID first name last name email and address I have some values in here but those aren't really important and in this example the main thing you need to pay attention to is the address because an address if you think about it actually consists of a street address State country and so forth so this column is not Atomic we're asking for multiple things within one column so that is the problem in this example the solution for this one would be to break it up into multiple columns you know a state and so forth that way we don't have a bunch of things within one column as an individual value this example you can see we have one row with a user ID first name last name and email but if you look closely we have two emails these emails were entered together as one individual value so you can think of maybe on a website It'll ask you for your email imagine putting one email in and then putting your second email in in the same box and clicking submit well it's entered into the data database as a single value maybe with the comma or something but it's still entered in as the email for this user so two values within one which is not Atomic in this example the actual values given for the email are Atomic because they're only one email but we put two entries within our database so now we have this in here twice this in here twice and this in here twice and the prim primary key should never be in there twice the only time you can see the primary key in there twice is if it's a reference as a foreign key because the foreign key can be put in there multiple times but the primary key of five should only be in there one time so we have all that duplicate data now what if this Caleb Curry goes and gets a name change because that's such a dumb name right no I'm just kidding because that's that's my name and I actually like that name but anyways if he gets a name change he updates his information what if uh only this one's updated so now we have conflicting data and see that's the problem with data Integrity we need to make sure that doesn't happen so in this example the column is the problem in this example the values for the row is the problem and in this example the values for the row is the problem so these basically have the same problem how do we figure out the solution let's take over let's take a look over here and as you can see there is no solution so yeah guys thanks for watching I'm just kidding let's let's do this the best solution for this problem is to have a user table and I'm going to write the columns that are within this user table so we would have a user ID then we are going to have a first name and we're going to have a last name if you wanted the address in there you could have street address state country up all that other good stuff then we're also going to have an email table so the solution is to break off the problem column you can see in this example the email is the thing causing the problem the address that we had earlier that's fixable if it's a problem in the column we could just break that up into multiple columns so we would have to make a new table for that but since this one even the the columns cor it's the values within it that's causing the problem we would need to create a new table for that so that's why we have this email table and now within here we're going to have an email ID and then we're going to have a email which is going to be the actual email address which in this case would be these and then we're going to have a user ID now this is going to be a foreign key that references this user ID the primary key of the user table now if we wanted to put two individual emails we could have rows within this email table let's let's spread out the email table and see what it might look like here's what the email table might look like we would have an email ID which is just a random generated number for each email 6008 is fine and then the email that's going to be the actual address of the email so we could have this I'll try to make it just as bad as handwriting perfect then the user ID of who owns that which in this case would have been five because five was the ID that was used for this user this will be our first row then we could have another row and it'd be a new email so we'd have a new email ID it'd be a different email we would use this one this time and I'm going to make that beautiful handwriting that you guys love there we go and then the user ID for that would also be five now this repeating value is okay this this repeat right here this is okay because this is a forign key and multiple emails are allowed in this situation this email ID this is not not okay to repeat because each individual number should be a separate email because this is the primary key of the email table now when we look back at the user table we don't have any repeating data because we're only going to have a user ID such as five first name Caleb and the last name Curry and there's no need to make a repeating row because we have have all the information we need without having any problems if we change the name we would just update this keep the same ID change this to whatever we name our name ourselves or whatever the person names themselves so there you go everybody that's first normal form and I'll see you in the next video where we will be discussing second normal form peace out