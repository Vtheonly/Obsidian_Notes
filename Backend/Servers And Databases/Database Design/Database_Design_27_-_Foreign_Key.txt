hey what's up dudes in this video we're going to be talking about foreign keys so this is a big subject and there's a lot of important things so I'm going to be separating a lot of these Concepts up into separate videos so the next two or three videos this video and two others I think will be over foreign keys and a lot of things that have to do with foreign Keys what is sorry anyways uh this video will be talking about introduction to foreign keys and exactly what exactly they do all right so a foreign key is a reference and what does it reference it references a uh primary key so that's B that's the most basic definition of a foreign key now this can be a primary key in the same table or a primary key in a separate table so let's kind of see how this would play out if we do some drawing right let's let's think of a class for a college database so this database has uh has all the information for a specific college or multiple colleges and one table is for classes we also have a table for instructors and for users and anything else that's a obvious that's an obvious entity so let's let's look at the class table so we have a class table we just draw out here within here we could have a class ID which like I said we're just going to be using surrogate keys for most of this uh you can do the same thing with natural keys and if you have no idea what I'm talking about just don't even just pretend I never said anything so yeah we have a class ID that's an example of a surrogate primary key we could also have an instructor you see so we can have an instructor ID right and we could have let's say a room number because we could have we could have a table for every single room which talks about more information about the room or I don't know if that's a really good example or we if like we could say we have a bigger building or a bigger college and we have a table for each building so that's probably that's probably a better example so we could say a building ID to say which which building it is in all right so here here are three IDs so you can assume that they're all keys because almost all IDs are going to be keys of some sort which one is the primary key well this one right here the class ID this is the primary key because it's the class table every single row within this table is going to have a class ID whether it be 1 2 3 4 7 12 843 uh 64 whatever it is it's going to have a class ID every single row so every single class is going to have its own ID we also have an instructor ID and we also have a building ID well since these are kind of unrelated to the class you can assume that they're foreign keys in this example because we're not going to have an instructor ID for a class necessarily by itself this is going to be an instructor ID for an instructor so that means we have another table for instructor so this is our instructor's table I think I'm spelling instructor right and we have an instructor in here instructor ID well this you can tell that these are a reference here we can also have a building ID so this references another table and that would be the building and then we have a building ID uh let see if I can get this sorry I'm taking forever to write and I can't even write nice that's says building ID right there and this references that there so you can see there's a connection between these tables now we'll get more into drawing uh relationships better like rather than just using lines we'll talk about more of that in the future but as for now we can see that these reference these columns so the columns point to each other and also each individual row is going to point to each other so let me explain that a little bit more when we have a row within our class table let's draw this table out a little bit better so we can kind of see how it would work so let's say this is an actual example of the values within this table we have a class ID and instructor I'm just going to put I and then the building ID just for Simplicity okay because I don't feel like writing all that out so we could have a class ID and just just to make things more uh just to be more accurate to what a normal database would be we could say like the name the name of the class like biology or whatever so we could have a class ID we could have seven for a value we could have the instructor ID could be 63 we could have the building ID of of 16 and then the name could be biology well every single column is going to have column rules or requirements for example these two columns here individually this one is going to have a rule that says every single value within this column so as we go to the next row the next value every single one is going to have to to reference something from the instructor table because it's an instructor ID so that's one of the column rules now same for the building ID we could say that every single row has to reference a value within the building ID all right so that means the row right here let's say this row individually this one right here the class ID with seven biology references the instructor with the ID of 63 and the building with the ID of 16 so you can see that the column has rules set to say that every single value within this column every single row is going to have to reference an instructor and a building now each individual row we could say oh the specific row references the building and 16 and the instructor 63 you see so that's kind of how foreign Keys work let me uh clear this out kind of draw it out a different way let's take a look at the the building table okay so let's just draw a little square just to represent it and let's say within this table we're not going to structure The Columns or anything we're just going to say we have the building s uh 16 and 14 so these are three separate buildings and we could have names for the buildings and all kinds of other things now we have within the class let's say this is the class table right and we have the class ID so the class ID would be like 64 38 123 it it doesn't really matter what number they are and eight right and now we're we're going to have a reference to the building ID so let's say we have right so here's just an example so over here we got the class ID we got the uh building ID and then we got the building ID and then we could have more information about the building here if we wanted well you can see that there's a connection between every single value every single row within this class table has a connection with a building ID so the the entire column building ID has the rules that every single value within that column has to point to a value within the building ID of the building table now each individual row has a value that points to a specific row within the building ID as you can see these are all individual rows sorry I getting a little crowded here we can see that three of these classes in this class table reference one building and that's the building with the id7 and that could be the room uh legit building 74 or whatever you want to call your building it doesn't really matter so that's that's an example of a relationship using foreign Keys foreign keys are what keep things connected so let's say um the name of building seven was legit because I I really don't know what else to name it well now I have the value legit as its name and we connect with the ID so rather than putting legit legit legit and having repeating data that could be easily messed up for example if legit was changed to legit with two T's or CH just change the name completely well now with this forign key it's connected so it updates automatically uh so yeah that's kind of how forign Keys work just keep in mind that every table has one primary key now that primary can primary key can be a combination of multiple columns if you want but it only is defined as one primary key for example we could have the combination of first name plus last name this group could be the primary key but we're not going to have the first name primary key and we're not going to have also the last name primary key because that's two two primary keys and we can't do that we can have the combination of the two but with foreign Keys you can have multiple columns having foreign key relations to different tables but keep in mind each column can only have one reference so in the class example we had a teacher ID well that teacher ID here's the class table and let's say the teacher ID is s six and five well this can be a reference and we could also have another foreign key we could have the building ID which could be 6 12 and 8 so although we only allow to have one primary key in a table we could have multiple forign Keys referencing different tables if we wanted it to be where the in the uh the instructor I think it's supposed to be an I so the instructor to where the class can have multiple instructors well that's a many to many relationship and we're going to have to redesign our tables with an intermediary table so hopefully that's kind of making sense I just want you to realize that the primary keys are what sort each individual tables the foreign keys are what connect tables and that you protect that Integrity with foreign key constraints which we'll be talking about in the upcoming next few videos so that's all I really got to say about foreign keys in this video uh if you're new to this it's might be a lot of complex thought but don't let it uh B don't let it overwhelm you just take it easy and if you ever need check out my uh I have another database design see which kind of takes things a little easier so if that would be beneficial for you check that out if you have any questions leave me a comment and I'll be sure to get to them thank you and subscribe