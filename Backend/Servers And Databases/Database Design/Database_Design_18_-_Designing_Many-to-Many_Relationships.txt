hey what's up everyone it's Caleb from Caleb's Video Maker 2 caleb.com if you like this video be sure to subscribe yeah I'm like a broken record I tell you this like all the time guys you just need to click it already just click it click subscribe if you haven't made a Google account make a Google account and then subscribe and then make 10 more no I'm kidding don't just subscribe with one I mean whatever but anyways this video will be about many to many relationships ship boom and we're talking about designing many to many relationships so I said a couple video Go videos ago that we have problems when we design many to many relationships they don't work outright they don't and I mean I never really explain why well this video I'm going to explain why think of uh let's think of a good example a college a class can have many students and a student can have many classes so we have two entities we have to worry about we have a the class let's just pluralize it because it makes more sense the classes and then the students so let's just think of an example uh of a way we would try to tr we would try to design this and it's it's not going to work out right but we'll just we'll just try all right here we have classes table and we have a specific class such as math um math 101 whatever really so we have math you can't even read that my handw writing is so bad so we have math 101 and then we list all of the people within this class so we have uh student number one and then student number two and then student number three all right well we could try that except what if a student drops out well then we have a n value which we don't want to have those if possible and what if we need four students well that's not going to work because we only have three columns so how else can we do it well we could try just having students well then every single column could have like 100 students and we already learned about the atomic rule we only want one column to store one value one student so what do we do let okay that's not going to work let's try over here let's try it on the students side we have a table for students so we have Jimmy and he's taking the first all right yeah let's let's list the columns so we have the name and then we have class number one and then we have class number two and then we have class number three well oh that's cool what if he wants to take four classes though well then we have to add a new column and let's say someone psycho crazy guy takes like 20 classes so now I have it all the way down to class 20 and then a new person comes to the school and he only takes one class so now his first class is like math and then there's 19 columns for that guy who are empty because we have to have the columns for every single person we think of it like this if we drew that out so where you could see it better we would have a table and then we'd have the IDE of the person and then the classes so we'll just put like class one class two class three class four class five six let's just leave it at that and we'll just kind of make rows for these and we have a new guy sign up so we have a guy with the idea of six and his first class is math right and then his second class is geology and then Spanish and then U fashion and then uh biology and then chemistry and then we have a new guy come and he his ID is eight and and he only takes um science right well now we have null n n empty nothing we wasted all of this space and you can assume that's going to keep happening so that's wasted space in our database bad design so how do we possibly do this well the trick is because because we think of if we're trying to think of like parent children who's the parent in this situation well a class has multiple students so that would make the class the parent and the students the children but a student can have multiple classes so that would make the student the parent and the classes the children so how is it that this is the parent and this is the parent at the same time that means this points to a child and this points to a child so this parent is the parent of this parent who is also the child of this child which that just like blew my mind I don't even know what's going on so the way we do this is we break it up into two one to many relationships so this many to many is going to become a one to many and then a a second I think it's I guess all right um okay just for you guys' information these these things I think the correct way to do that is many to n for uh like the like the end keep going on but uh just don't don't worry about that we'll talk about that in upcoming videos I'm just writing that for my sake so we're going to break this up into one and many and then another one to many but the other way so that is how we fix that problem all right so let's Implement that with classes and students what we need is what's known as an intermediary table or a junction table they're both the same thing I'll I'll write that out so you can hear me intermediary or a junction there's also like 50 other names for this table but I mean just intermediary table will work fine so i n t e r m e d i a r y and what that is that is how we connect our tables so we break this up into a total of three tables so we have the intermediary table which is the one I just talked about and then we have the students table and then we have the class table so class student this is the intermediary table so we have a one to many relationship going this way and then we have a one to many relationship going this way so one many one subit I know this seems a little confusing at first but trust me it'll make sense once we start explaining things more so we have one to many one to many and this is the intermediary table all right so let's just draw this connection so we kind of make uh can visualize this a little more and kind of like split this to see how it works so we're in the many side of both relationships in one table that's because we know that a on to many relationship is spread out over two tables so one two one two the the two it's it's being shared so what would we name this uh we would say like we could name it um class students for example and these we going to have foreign keys that point back to the class and the students so now that we kind of understand what it looks like when we draw it let's give specific examples to illustrate this actually like what it would work like look like whatever all right so let's say we have our classes over here and our students over here okay so first things first we have math we'll just keep it simple math science I mean obviously it'd be more in depth like math 101 math 205 or uh 1 12200 or whatever and then we have English but just for Simplicity sake let's say these are the only three classes in the college all right then we have all of our our students we have Caleb we have CB we have khib and then we have man I'm so conceited all I ever talk about is myself all right let's get rid of my name let's go with Johnny and Jake and Sally and Claire oh not Claire all right so here are all of our students for our class classes students we connect these in the middle so first things first we give them all an ID because that will be our primary key so we'll just give these random assigned numbers which is pretty much what a primary key is a surrogate primary key so uh we'll give this one 63 this is something our database would do for us this one will be uh 75 and this one would be 89 hope you guys can see that clearly we'll do the same thing over here so John will have the ID of eight Jake the ID of 17 Sally the ID of 16 and CLA the ID of four just kidding 666 cuz she's evil 666 I'm just kidding we'll just we'll just go with uh six all right now we use the inter mediary table to connect these IDs so we have this table here we have two columns we have the class ID and then we have the user ID and then if you wanted to title these tables we can make it classes class students and students it's intermediary table what an intermediary is it's something that connects two things it's like it allows this table to talk to that table so it's a connection between these two tables we put the ID of the user with the class that they're taking so let's say John is taking English in science we would have eight 75 8 89 writing really big I'm going to run out of room really quickly and what this does is using this intermediary table we can figure out that all of these user IDs point back to a specific person and these IDs point back to a specific class we are not repeating data because we need to know the user of this class ID this is a foreign key pointing back to one specific value so that means if John decided to drop out well then we have foreign key constraints to get rid of these that way we don't have to worry about incorrect data or users I guess this I'm sorry this should be like students sorry but we don't have to worry about students who uh we don't have to worry about students being enrolled who don't exist so that is the solution to a many to many relationship this video is getting really long so Sally could do the same thing we could say 16 and then 75 she's taking science uh Claire she's taken uh she's taking math we keep going on if we really wanted to we can make this table as big as we wanted and basically this is the easiest best way to use as much databasing resources storage as possible as well is now we solved the many I'm sorry the parent child relationships that's because we have the parent over here we also have the parent over here they point to the child table so this child table becomes the child of both of these parents sort of how in real life every single person has two parents and um the person is this entire the row I mean okay so yeah applying that to this the parent is the class and the student of the class and the child is a row where we have both the class and the student this right here here needs to be unique it's an individual child we can't have 663 again because that's saying Claire is taking science and Claire I'm sorry math Claire is taking math and Claire is taking math that doesn't make sense so this right here is unique 63 to6 you can't have it in there twice so the child is an individual connection between the parent and the other parent so yeah that is how you properly store many to many relationships and I know the all these relationships are kind of complex and you don't really understand with like a stupid chalkboard but like I said we will be getting into on screen computer videos in the introduction I mean I said that in the introduction we're not going to do that introduction because that wouldn't even make sense so yeah we will be explaining these Concepts and then we will be applying these Concepts to actually databases once we get through all of the database Concepts so yeah see around St uh stick through to the end of this series and you will learn a lot so yeah be sure to subscribe thank you