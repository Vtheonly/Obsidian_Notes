[Applause] oh didn't see you there guys anyways in this video we're going to be talking about [Music] keys so a key is not something you use to unlock a door keys in database are something else a key key keeps everything unique basically that's that's the easiest way to remember what a key is so when you think in a database it we kind of structure things in tables Ian we don't kind of do that we do we do that we do do that anyways if we have a table here we have the columns which are the attributes of each thing so like let's make it a user account table because that's always the easiest example so we got we got user so that's the title of the table now each individual row within this table is going to be a new user each column is going to be a thing about the users so the columns can be username uh first name last name password and email just for an example I mean you can really put whatever you really want in there well a key is something that is going to separate this Row from the rest of the rows so in this example think of the things that could be duplicated think of all the possible values that you could put within one of these columns and think is it possible to duplicate it in your application I mean yeah it's possible to duplicate it if you allow it to be duplicated but what naturally should not be duplicated so typically when you sign up for a website or a a game or something they'll ask for your email right now when you sign up you put your email in you typically have to go to your email and click like a confirmation or something to register your email so they know that it's a genuine email account basically just so they can have your email and they can send you emails and stuff but yeah that is an example of what we could use as a key that's because every single row within this uh table should have a separate email some websites allow you to use the same email more than once if that's the case then this would not be a good key this kind of key is known as a natural key because it's naturally already in our our table we don't have to define a new column just for the sake of a key and we'll be getting into more of that in upcoming videos because doing a whole whole bunch of videos over keys so you get them like really good all kind like I'm going to go over pretty much everything but anyways if you make it aware only one person can use a certain email and that email can only be used by one person well then that could be used as the key the way that works is it basically let's say we have the emails one two three at blah blah blah ABC blah blah blah uh XYZ blah blah blah BL blah and these are three separate rows well this is going to let us know which person we're talking about and like now if someone has the first same first name and last name by chance let's say we have two Caleb curries Caleb Curry Caleb Curry we can't use the name as a key because two people have it and it's not it's going to confuse us because okay do we have two people with the name Caleb Curry or is one person Caleb curry in the database twice is that an error on our part or what so we can't have the key be in there more than once so uh it's never there's um it's always unique is what I'm looking for so the key is always unique can you see that you see you see yeah I think you can see it all right so what is another example of a key that we could use in this t table let's get rid of this email let's say we're not using the email anymore and let's say the website allows multiple emails from different people so like if um my mom signed up and then I wanted to sign up I could use my mom's email so we have two people from the same email that's an example of some websites that allow you to do that but I mean not tons of websites do that but it is a possibility it all just depends on what you want to do it's up to you because well I guess it's up to the if you're making a database for yourself well then it's up to you but if you're making it for someone else then you get your own their rules and you follow them let's think of some other ones all right well email let's just say it's not email password well that's really a bad one because passwords um you they're not necessarily unique because two different accounts can have the same password and if if you didn't allow that to where they could have the same password you'd try to put in a password for your new account and it'd be like oh this password is already in use then you're like oh so then you can try that password on other accounts and try to hack into people so that would not be a good database design obviously so password that ain't going to work cuz not every password is unique first name last name H it could possibly work but it's really bad maybe first name last name and middle initial or middle name but even that there's there's people with the same first name last name and middle name so H that's first name won't work last name won't work and the combination of first name and last name won't work and yes keys can be a combination of two columns we'll be getting into that too what we have left is username well a username is a generated word that is used to represent your account account it's typically not a name or an email it's something like Caleb 2 three or whatever you know what I'm saying so then when people talk to you they're talking to Caleb 123 rather than Caleb Curry or they could put the name there but some websites use usernames or some games use usernames or programs use usernames so you have a username and a password well a username is always unique because if you have two people with the same username when you try to sign in how is the database going to know which one you're trying to sign into you know they're you they have to be unique so hopefully that kind of makes sense that could be used as a key because we could have the username Caleb C and then we could have dog one two three and then Pi these are three different people all the other stuff first name last name password email they point to that key so we have a first name and a last name a password and an email for the user with the username Caleb C that's how the key works we have a first name a last name password and an email for the person with the uh with the user I'm sorry we have a first name last name past email for the user with the name dog1 123 and then we have a first name last name password and email for the user with the username Pi that's kind of how the key works the other thing is that the key should never be changing so the second thing never changing now why is this well that's because when we create key we use them to kind of structure our entire database everything points towards the key in the last example we had I'll just draw a key for representation let's say this is the key and we'll just say it's the username right well every other column is part is points back to that key so we have the the name of the person we have the password and we know that these are pointing to this specific person if we got rid of this key and now we have two people with the name Caleb with the password Pi well now are we talking about the same person or are we talking about two separate people or what we don't really know but now if we give it Keys have a key let me get get that key back so this uh let me see if I can draw a key right probably not ah close enough all right here's our key now we know that this Caleb points to this specific person we could have it be the username or you might often see numbers like 72 the ID which we'll talk about that too soon now if we have a separate key like this well then that is a a different person so we could have this guy has the username Caleb is awesome 72 this guy be like sexy chick 74 see what I'm saying so that's kind of how the keys work we never want them to change because then it's kind of it's confusing because all of these objects are part of this key basically this key is used to define uniqueness well if we can change it it questions the Integrity of our database because between tables we connect things by keys so let's say this is a user table this is a comment table if we have it to where we can change the key well then this connection is you're going to have to update this connection all of the time now if we have 50 tables connected to this user table I'm just going to draw four just make simple I won't draw all 50 well now when we update this key this key connection so we have a comments by a user we have sales we have friends we have messages whatever it doesn't really matter well then we change this key well that means every single one of these connections are going to have to update that uh requires a lot of work from the server make sense so we don't want them to change because we don't want to have to have that extra work from our database so that's one thing unique never changing the other thing these are just three general rules there's some other suggestions and stuff and I'll get into that soon but the other thing is never null that means empty Val or no value so when we have a table and we have a key value let's say we have a user ID this guy's six this guy's five this guy's four four this guy's 38 it doesn't really matter the order and then we have their name and whatever blah blah blah well we don't want it to where we can have a blank ID and still have information like Sally this Sally doesn't have a key that is another thing we do not want to do with our keys so here are the three main rules and we'll get into more in U upcoming videos but if should always be unique never be changing and it should never be empty you should not allow a row without a key yeah that's about all so peace out check you out in the next I mean see you peace out check out this video and I don't even know what I was going to say there be sure to subscribe and I'll see you in the next video