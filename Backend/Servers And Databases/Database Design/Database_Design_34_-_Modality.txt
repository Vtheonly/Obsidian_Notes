hey everybody welcome back to your database design series I just dropped my Chalk in this video we're going to be talking about modality which is basically a continuation of the last video so be sure to watch that if you haven't seen that already so a lot of these Design Concepts you've already learned from previous videos in this series but now I'm talking about the technical terms for drawing them out when we're actually drawing our database because we can think about our database all we want but it's not really going to be effective until we actually draw it out so we can see how things are worked or connected and then we can program it from there so yeah first I like to explain the concepts then I like to explain Design Concepts and then I like to explain uh actually turning that into a database which we're not going to be covering much in this video because this is database design but yeah I have a MySQL tutorial series if you're interested in that and we might be doing some more after this one so let's get let's get started cuz it's already been a minute modality it's basically whether or not the child is a required child if if the relationship is required we talked about that when we talked about the column characteristic uh not null so think of it like this we have a credit card company we have a table for the card holder and then we have a table for the card obviously the card holder the ID for the card holder the person who owns the card or or buys the card from the credit card company they're going to have an ID and that's going to be a not null column meaning it has to have a value that is obvious because it's going to be the primary key surrogate primary key and it has has to have a value so we have like this guy and he has an ID of seven we have another guy with the ID of 12 and then 368 and so forth those are IDs you see card that is going to have a column which is a foreign key referencing the card holder because the card is the child in this relationship so the card holder has the primary key can you see that down there yes you can card is going to have a foreign key which connects to these so this is going to be a foreign key meaning these are the people that own certain cards so we have a card with the ID of 12 we have a card with the ID of 48 I'm just making up numbers right here we have a card with the ID of 98 we have a card with the ID of 112 well they each have an own owner you see this is the owner and this is a foreign key which references the primary key so seven this card is going to be owned by that person seven this card is going to be owned by that person seven this card is going to be owned by that person so all of these three cars are owned by that person 368 that's going to be owned by somebody else now if we gave this column right here the foreign key the basically the card holder column cuz it's a child if we gave that the column characteristic not null it would be required that every single row has an owner that means we can't have a card in here that is either not activated and doesn't have an owner or we can't have a card in there that is not being currently possessed by a card holder because you think if you have a credit card somebody owns that credit card but when you first make a credit card or something or or if you re like uh if if you get rid of the credit card or something it might be a credit card that currently does not have an owner does that make sense so basically just a credit card that's not being actively used or is uh disabled or something like that and does not have a card holder well if we wanted us to if we wanted this database to be able to store cards that don't have owners we would not want the notnull characteristic because that's going to prevent it so that's kind of how that works so if we take that off then we could have a card down here with the ID of 101 that doesn't have a card owner well I know we we've already explained this all but now let's talk about designing so let's just make this simple we pay attention to the uh we'll say we'll say one card this obviously is going we're going to talk about a a one to many relationship meaning one card holder owns many cards and we're also going to be talking about a one two one relationship meaning one card owner owns one card if we want to do a many to many uh we just need an intermediary table the same concept kind of applies but uh we don't necessarily like to go through that just break it into a one to many two two one to many relationships all right so let's try this so we have over here we have the table that's going to be the card owner over here we have the table for the cards and there's a relationship between these two that's a really big gap but whatever so let's start over here we can say one card holder because that's what we're just going to say one card holder for each time let me bring this in some so you can actually see one card holder can have one card so what we just did is cardinality we talked about this in the last video now let's do another example we'll just do the same thing and you'll see why in a second let's do another example and then finally one more example running out of room here so we have the basic relationships now we can add one more thing to say if it's nullable or not nullable basically does the child this is the child which is the card we're asking does it does the uh foreign key colum have the notnull characteristic so we have the possible relationships one to to one oops one to many now what we're going to do is we're able to add the modality in and the way we do that is we add either a little circle or a little Dash or you can think of it as a zero or a one which actually will make sense and you'll see why in a second zero or a one so over here we have the card holder one card holder for all of these examples and then over here we have the card a zero means the column does not have the not n characteristic meaning it accepts no value so this is saying it can accept no value so we have a one: one relationship that's the maximum the card holder can have up to one card but it's not required so zero or one cards one or one cards zero at least zero cards because you can have up to many or at least one card so this means not null not null now when we Design This we're talking generally from table to table so we would have card holder and then card and why do I have to say that basically because if we have if we have a zero here that means there's not necessarily going to be relationship between a certain row so when we're talking about rows we might not actually draw a relationship between certain rows when we draw relationships we talk from table to table and those relationships explain what rows can have relation relationships with different rows so in this example let's just focus on the top one just to make it easier we would draw this within our database application we would say we have the table card holder and then that has some kind of relationship with the table card now we could say one card holder can have zero up to one relationships with one individual card so we have a card holder with the ID of seven and then we have an ID a card with the ID of 68 owned by the card holder 7 so that points back and that's acceptable we could also have a card uh we could have a card 69 and we could have a person eight and we could say oh it doesn't have an owner that's fine we could have another card 70 and it can have the owner eight which points back to eight and then we could have another person which could be 87 we could have a card we could have a card um 63 which the has the owner of 87 and that points back to the owner 87 so that's how those relationships work now of at first these can be kind of confusing so just practice uh make sure you fully understand how each one works just review we could have um here's a four possibilities we could have let me put that one up there it makes more sense one card holder can have Z zero or one card one card holder can have one only one card because you can have one the least and then up to one and then you have one card holder zero or more and then one card holder one or more these two are required meaning every single child has to have an owner every single card has to have an owner every single child has to have a parent so hopefully that all makes good sense if you have any questions leave please leave me a comment and I will see you guys in the next video peace