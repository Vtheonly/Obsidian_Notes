hey guys welcome back to your database design video series in the last three videos we talked about one toone relationships one to many relationships and one to uh many to many relationships this video I wanted to talk about how we design these relationships I decided I was going to break them up into three videos so first we'll be talking about designing onetoone relationships and then one to many and then many to many so this video will be about designing one to one relationships in a database all right let's begin so the first thing we need to realize is that when we have a one toone relationship the the attribute side so we have an entity so let's say let's just say we have a connection between a person and uh their their username all right so we have this we have this guy here let me get rid of these boxes I don't need those we have this guy and he has a username on a website we'll just say it's Caleb Curry because that's usually my username for things and we'll just name this guy Caleb right well that username the only person who's going to have that username is him and he is only going to have one username that account is only going to have one username that's it one toone relationship so we need to realize that this is exclusive to this person it's all his no one else owns it no one else is connected to it it's only his so that means we can often store onetoone relationships as attributes rather than entities so rather than his username being an entity it's an attribute if you don't really know what that means don't worry I'll be explaining in just a second but just think of it as it's exclusively his so that is part it describes him what is this guy's username it's Caleb Curry it's an attribute of that person when we're talking about one to many relationships though or many to many we think of like a class the the students of the class are not exclusive to that class they can take other classes therefore it wouldn't really make sense to store them as attributes CU it's not really it just doesn't make much sense and I know it'll it'll be clear so just just wait a second so we can actually have a table the relationship between the account and the username of the account can be stored just as a column within the table so we have an ID and then we have a a name for example and then a username this username is exclusive to this ID of this person so like six Caleb Caleb Curry that is how we would design a onetoone relationship we would put it within the same table if we have a new row within our uh table we now have a new person this person can't have another username like Caleb Curry they have to have a different one so we can make it John 123 this name is exclusive to that person so we just store as a column within our table make sense so here are our individual ual rows this points to this ID it's an individual entity so the entity is the the account the username is an attribute to that account there will be occasional times when we store a onetoone relationship over multiple tables and I will explain now when that would be the case let's just think of an example of a database for a credit card company we have a relationship between the card holder and the card so by card holder I just mean the person who who uh gets the card and can use it to buy things the person who owns it pretty much and then we have the card all right now let's just say this this um company only allows you to have one credit card so so this card holder can only have one card and this card can only be owned by one card holder that means we have a one to one relationship one two one how would we store this in a database well if we just went with the attribute thing that we talked about earlier here is what it would look like here is our table and I'm just going to list the columns so we have the the card holder table first thing is we would have like an ID for the card holder uh we would have probably card holder's first name the card holder's last name and then we would have the card so we could say well that's their card we could let's say we could assign every card an ID or a a card number so we can say card number if they have a a card we can give it a value if it if if they don't have a card we can leave it null well that can be considered an attribute of the card holder because all these point back to the card holder now if we want to store more information about the card such as the the issue date when the card was given to the person so we can say card issue date well now we can see that this is relying on the card not the card holder so if we want to store extra attributes about the attribute in the one to one relationship we can move that to a new table and we can make it a card table give it an ID and then we could say uh card number and then issue date now we can store as much information about this card so if we want to store the max amount um the late fee pretty much anything we want to store about this card can be stored in this table and we can replace this card number with a reference so we have a card ID and that points back to this ID you see what I'm saying this is a one: one relationship over multiple people just like this card has a connection to the card holder there's a onetoone connection over multiple tables the reason we did this is so we could store more information about the card because if we stored it all in one table we would have bad database design and I'll show you why in just a second all right so here's our table can you guys see that all right we have the ID and then the name of the person and then we have the card number and then the max amount and so forth well you can see that this table is really about two things it's no longer about one thing we would have to say this is a user and card table which is not proper because we're not following the rule of one where a table should be about one entity and a row should be about one entity cuz now we have the user side and then we have the card side it's it's like trying to store two tables in one the only time it's acceptable to have the card number in the users table is when we don't store more information about it because now all we have is a card number the card number is about the user it points to the user but the max amount of the card has nothing to do with the user therefore it's relying dependent upon the card so a one toone relationship in conclusion one a one to one relationship the way it is stored is either an attribute with within the table or if you need to store more information about The Entity then we can have another table and then just use foreign keys to connect them which that's something we'll be talking about in an upcoming video almost always though uh you will be seeing a on toone relationship used as an attribute so when you think of you have a one one relationship between something you have a connection let's say you it's a dating website um the user is in a relationship with another user that that's a onetoone relationship we could just have that as a column within our user table so we could have the user table we could have the user ID with the name first name last last name a phone number or whatever else and then we could say relationship that's a one toone relationship we could just have that have that be an ID of another person and we don't have to worry about having another table for that so yeah that's a one toone relationship in the next video we'll be talking about designing one to many relationships thank you for watching and be sure to subscribe