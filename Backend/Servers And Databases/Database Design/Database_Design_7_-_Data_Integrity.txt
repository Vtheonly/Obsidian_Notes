hey what's up everybody I'm on the opposite side today which just feels weird but anyways we're going to be talking about data Integrity all right so what is data Integrity we talked about it a little bit in the last video but this video is going to be going over it in more depth data Integrity is just having correct data in your database so when you when we're databasing we don't want repeating values we don't want incorrect values and we don't want broken relationships between tables for example in the last video I gave the example you have a table here and this is the uh user table this is weird writing like this and then we have a table over here and that is the sale table which is where you sell products for example this is just an example uh you can you can Implement other examples but this is just to illustrate my point a sale is when a user buys product that means a sale needs a user as the buyer otherwise there's no sale we can't have a sale if no one bought it does that make sense that means the sale is dependent on a user and we have a relationship the user buys stuff stuff is bought by a user this is a known as a can you see this this is known as a [Music] relationship now uh do keep in mind that the term relational database does not come from the word relationship it comes from relations which is the mathematical um connection of sets which we talked about that in a earlier video but just don't get that confused but relational database does have relationships between tables so this if for some reason this was broken and now we have a sale that was bought by a user or no user so for example let's say this sale was bought by user with the ID of seven okay and then we have a user of ID of seven so there's a connection the sale was bought by the user of ID of 7 which points back to the user make sense that's data Integrity but If this relationship is broken and it says this sale is bought by the user with the ID of seven and then this person is removed from the database well now this sale points to a table or a user that doesn't exist and uh that might be that might be practical in some sense to say that sale was bought by that user when he did exist but for things that need to update consistently we don't want that to happen so that's an example of an Integrity issue so you want to keep that relationship to say okay well we got rid of the user we need to update the sales to say well either the person is deleted or also do something with the sales so yeah sorry if that was a little confusing okay so the three main types of data Integrity first one is entity integrity we talked about entities in like one of the first few videos an entity is anything we store data about so we had the user to begin with this is an entity what it means by entity Integrity is basically unique entities when we have a user we often give them IDs this is known as a key so an ID is used to enforce uniqueness among the entities like for example if we had a table for users and we store the the name of the person and then we store their address no let's just go their phone number yeah sorry because when we talk about addresses it's best to break it up into like Street State and I don't want it to go through all that so we could potentially have a person with a repeating name so let's just say his name's Caleb and his phone number is800 you wish all right well if we had another person if they both lived in the same house for example and this was their house phone well sometimes people name their children the same name as them so now we have two people with the same phone number and you look at this and you say okay well either either we have two people with the same phone number or we have two rows talking about the same person and we don't know because we don't have proper data Integrity so a way to solve this is to either add more columns to where the row would be unique such as a social security number or we could add an ID column and this would be like six and seven so now we're talking about two separate entities this is talking about this guy because his ID is seven this one is talking about this guy because his ID is six they're two separate entities that's entity Integrity having uniqueness among your entities we have uniqueness with the rows and we also have only one user table we're not going to have another user table because that information should go in the original user table on to referential Integrity this is the one we talked about earlier is when we reference the ID of a table and another table if we had a uh a comments table on the website right and we say who the comment is by we have a user ID which points back to this ID over here that's because the comment has to be posted by a user otherwise we have a comment that didn't have someone who posted it which doesn't make sense in the Practical world so we always have to have referential integrity which basically says every time there's a comment there needs to be a person who posted that comment and that connection needs to REM it needs to stay if for some reason this is disconnected and then this user is removed or this table is changed well then this could change I mean this stays the same and then there's a disconnection to where this is changed and this is old outdated data where either the user no longer exists and the comment still says he does or something else like that that's referential integrity and that'll make more sense once we start designing and stuff but yeah uh domain Integrity that that brings up a new word domain domain is basically just the acceptable values for a column for SE it's what we are storing the range of what we are storing within a database so when we're talking about tables we have columns so these these columns up here let's say we have a phone number well that means we should have a certain number of digits uh we have the area code and then the three digits and then the four digits and that's at least us it might change other places but that is uh 10 digits so we know that the phone number should be 10 digits and it should be numbers so if for some reason I put the word take in the phone number column well for one this is going to cause an error if we have domain Integrity because it's not a 10-digit number it's just a word that's not the proper domain it's not a digit it's not numbers and it's not 10 of them so we know that's going to cause an error so that's the basics of data Integrity if when we we don't have data Integrity we have errors when we have data Integrity we do something to correct those errors such as saying oh these all need to be numbers that's how we Implement data Integrity by setting database rules and how you do that with the database well that kind of varies upon the relational database management system that you use some relational database Management systems allow for General rules saying okay this has to be a range of this numbers some of them are more vague where they where they uh only allow you to implement data types data types would be like integer 10 digits so when we talk about practically implementing data Integrity different relational database Management Systems have different things you can do almost every single relational database system that I know of I'm pretty sure all of them but who knows um they allow for data types so a data type it's pretty pretty self-explanatory it's the type of data so in database we classify things as generally integer or text or date so we either have numbers text text or dates that's like three General categories which we'll be talking about that more in a future video but the data type can put limits on what we're allowed to store for example we can say okay we only want a character column with the maximum of 20 characters that means we can put a string in the column that says I like pizza yeah 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 that'll fit but if I wanted to change this pizza to lasagna well then I just added a couple extra characters that might cut it off I'm not sure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 so that's the maximum we could put in that data type that's an example of implementing that data Integrity for the uh characters so this this will be for the domain Integrity uh we can also have referential integrity with what's known as foreign key constraints which allows us to connect tables because when we draw tables we could say that they're connected in some way but how do we enforce that in a database we use foreign key constraints for example we can say if this is the um the parent let's say this is the users and this is the comments the user places a comment so this is the parent this is the child because the child can't exist without the parent you can't have a comment without a commenter well using foreign key constraints we can say all right if this user gets removed also remove all of the comments by this user that's an example of foreign key con strength as for the non-re repeating data that is done with just designing your database in the best way so yeah I know that video was kind of uh jump back and forth from concept to concept and maybe a little confusing but I'm sure you'll get it as time goes on so yeah that's all I have to say in this video thank you for watching if you liked it please be sure to subscribe and click like and share to your friends on Facebook or Twitter or Google Plus or yeah that's all I know LinkedIn yeah