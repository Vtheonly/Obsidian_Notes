hey everybody welcome to this video today we will be talking about self joints the way a self joint works is you take a table and you are essentially joining it with itself and that's what kind of makes self joints confusing and a lot of people can't find practical purposes for them I'm going to be giving you I dropped my marker I just got white marker oh self joints are complicated and a lot of people can't find practical purposes for them in this video I'll giving you at least one good reason for them so hopefully this video is helpful so when you have a self join think of basically duplicating the table you have and making an exact copy and then joining those two tables together that's a good way you can think about it so for this example I'm going to be using a user account system on a website and you know how some websites have like a referral option basically if you refer somebody you get like 20% of their money and or their points or 10% of their money so forth that's like referral marketing and when you do that you are assigned a person who referred you right and it can become a chain like this person referred this person referred this person referred this person so within a user table you might have a user ID and then on top of that you're going to have you know email first name last name and the person who referred you I am putting the person who referred you within a column known as referred by and this is actually a foreign key to the same table so within here you are going to have numbers such as 12 which is going to point back to the user ID of 12 so for example the user ID 11 might be a person who was referred by the user with a user ID of 12 now the only way that you can make this really work for a join is if you use a self join basically what we want to do is we want to replace referred by with the ID we want to use a join to replace this number with that user's email which I also forgot to put in here so you know just throw an email in there so we'll take this and then our outputed result will look something like this and this is the table that we're going to have and then we're going to insert data into that table so we might have a user such as Caleb Curry and His email is it's going to be swag at yolo.com and then it's referred by that we're going to replace that number with a user's email such as uh house house yahoo. org so that's just an example of what we can do with this self jooin now in order for this to work work we have to tell the database that we're going to be using the same table in basically two different tables and that can kind of be confusing and in order for that to work you have to use what's known as an alias I talked about those in the last video so be sure to check those on out so to begin we just kind of think of a name of what we could call each table we could have the first table which would also be the user table and then the second table which would be another uh copy of the user table now we're not actually like copying the data this is just for illustration point it's going to use that data that same table to withdraw the data from and we could say this one is um V1 and V2 for example those are our aliases and in order to define those we put as after our data after our table and put V1 so we could say user as V1 and then join user as V2 this is something kind of like what you would do so now we have a user as V1 and then we're joining in user as V2 and it kind of gets the idea that oh this person wants to use the same table for this situation let's try to figure this out let's begin we are going to put this within a select statement and I'm going to give you some specific syntax just so this can kind of make sense so we have a a select statement then right after the select statement we always put the columns we want to take our data from now this is going to get kind of confusing though because we have two basically two different tables that we're going to be taking data from so we have to think which table we want to take which columns from the way we had it set up before is we have this table and this table this was V1 and this was V2 well let's kind of in our imaginary brains which we don't have um we're going to say this table is for the user and this table is for the referrals so we're going to take from this table we'll take the uh the the user ID maybe or um the first name the last name and the email and then from this table we are going to take the email of the person who referred you so we'll take the uh referred by person's email so the way this will work is we're going to have the user ID such as seven and Caleb Curry and then their email and then it'll have an ID of seven or some or um eight for the referred Buy and then that's going to go to the second table to get that person's email you got to keep this in mind and you have to figure out what you're going to name your tables before you start the select because now that we are going to say the columns we have to qualify those columns by putting a DOT before them and saying what table they're from and we can just use the Alias name that we've had or made up so we could say select V1 period or Dot and we could say first name comma and then we could say V1 do last name comma V1 do email comma finally we're going to take V2 and we're going to take that person's email or you can do their first name or last name whatever you want to put in that referral word by thing if you wanted to say their first name you can say v2. first name if you want it to be their last name it can be v2. last name or if you want a combination of both you can use a concatenation function or something so we're just going to use the email so we're going to take the v2. email now that we know what columns and what tables that we want to take the data from we actually have to put the from statement still and say something like from and then put the table we are taking this data from this is where we are going to Define our Alias so we could say from user as V1 that is going to basically tell the database that the user table is known as V1 now we can do a join join this is going to default to an in join if you just use join like that we could say join user as V2 that is going to basically tell them that user is also going to be known as V2 but it's going to be considered a different table in this situation then you're going to do the on which is going to say where we are going to join these things now this is where it can get really confusing because there's so many possibilities that you can put right here for this situation we are going to take V1 and we are going to take the referred by column and that is going to be the same as V2 user ID column so if you can think about this imagine literally two tables with the same exact data here's V1 here's V2 and we have a user ID and then within here we also have a referred to by or referred by I guess that's going to reference the user ID of the the V2 table so that means we need to basically make this connection and say that if there is a six over here in the referred by table it needs to be the same as the user ID over here that has six if you need more practical data under to understand this imagine we have this guy over here and his name is Samuel and we have this guy over here and his name is uh yeah that's his name and all refer for Samuel that means is going to have the user ID of six within this user row of the user ID of let's say 12 so Samuel has the ID of 12 and he was referred by the person with the user ID of six which is and then this other table which is also the same user table it's going to refer to the person with the ID of six which is this guy hopefully that makes sense but in reality you're not going to have two exact copies of the data it's smart enough to understand that these are all one table so it's basically going to take that referred by and then go back to the user column and join that into what would look like taking two tables and putting them together that's why I can get kind of confusing but when you take this query as it is and you put it in your database you will get something that looks like a normal joined table it'll be one really big table and it will have the The Columns that we selected V1 FN on top of this we're also going to have the V1 last name and the V1 email and the V2 email then if we were to put example data into this it would look something like Caleb Curry an email and then the V2 email would be like another guy's email so such as sw.com that's what it would look like and it would just give you all of the rows for that so yeah you can mess around do all kinds of cool joins and all kinds of stuff but there is one more thing that I want to tell you and that has to do with aases well you know this might not be too pretty how you have it right now and it might be confusing having U an email and then right beside another email like what does those what do those mean well you might want to say that one column is the user and another is the person who referred them so you can use an alias for that too so for that you also use as but instead of putting in the from you're just going to put it right after the column that you want to change so you can put here here here and here so if I wanted the the table two email or the person who referred you could make it say like um v2. email as referred by and this you're going to want to put in quotes to to say you want that string as the title for that column and then when you get that new table that join instead of saying email it's going to say referred by and then it'll list the data yo what's up my homie homies this video or this section of the video I guess we'll just be discussing this in a little more depth by showing this real example that I explained on the board so you can see I have a user table and within my user table you know I got user ID pass email for uh first name last last name and a referred by this referred by is a foreign key referencing the user ID it's kind of interesting how that works so you can see here is this guy llamas swag yolo.com was referred by two which in this case would be high mom at l.com which he basically referred everybody that's why he has a zero here and if you scroll down we also have some people who are referred by one basically what we want to do is we want to replace this referred by with the person's mail and to do that we can use a self jooin and who knows there might be a way easier way to do this so if there is just be sure to let me know all right so here is a query that would work to do that so let me just uh refresh this and here's what it's going to do it's going to select the first name last name email of the person who was referred and it's also going to take the email of the referal person the person who referred the other person so the person within this referred by column okay so you can see we got the first name last name email that's one thing and then the referred by email so how does this work we take the columns and we also replaced the email of the referred by and put referred by that's why it shows up right here which is what we want that's good then we say what table we're going to take the user table and call it V1 which you can basically name it whatever as long as you update uh right here here then it'll still work that's just a name I made up I couldn't think of something cool but basic basically a version one you know this in join is we're taking our other version of the table and uh just so you know this iner is optional so you can take that away and it's going to work exactly the same way then we're going to say how it's related so basically this referred by email uh that needs to have an ID in that table that refers to a person so the referred by is going to have an ID and that needs to match a user ID So within the first table let's go back to the user table this two for example that needs to reference an actual person it needs to be actual data within that second version of the user table and it's going to go to the second version of the user table find that person with the uh ID of two and it's going to take that email and display it right here so hopefully that makes sense guys and of course you can mess this mess up uh the queer you can just mess around with it and put your own stuff in it to get your own results and you can even change this statement right here to get even more crazy results so yeah guys thanks for watching peace on Earth and catch you in the next video And subscribe as well as V1 last name and v ah it's a one not now for the aliases of the table we're going to tell MySQL oh crap nuggets I me it's not MySQL it's database is