hey I got a bunch of writing on the board but don't look at it yet because I just want to talk to you guys for a minute I just wrote it so you wouldn't have to watch me write like 500 Words CU that' just be boring so instead I'm just going to talk instead so much better right anyways last video and throughout the series we've talked about foreign keys and as we know they keep connections between tables in a database so table one table two boom foreign key connect from this foreign key references the primary key of this table over here that's kind of how foreign Keys work they protect the Integrity of our database they keep everything consistent think about if if um there was no foreign key constraints which keeps keeps it updated and everything then we would have to manually update all connections between tables and that be a big waste of time and it' just be easier just to store everything in one giant table which both both Solutions either manually doing it or storing everything in one giant table is not going to work so we need foreign key constraints to protect the Integrity of our database right it's called referential referential integrity that's a big word sorry all right so now this Concepts these words might be uh specific to a certain relational database management system so these are from MySQL but if you're using a different relational database management system yours might be a little bit different but in general the concepts are pretty similar so you're not wasting your time if you don't use MySQL because you need to understand how foreign key constraints work all right cool so first of all foreign key constraints make sure that if you update the parent the children are going to update or cause an error or something like that it's up to you you can make the decision and and it's also going to prevent you from creating children when there's not a parent that are that with that uh primary key for example if we have five users with the users's ID 2 4 6 8 and 10 and then I make a comments table and I add a row that's like from the user 745 well that person doesn't even exist so that's not going to work so that's why uh foreign key constraints are important because they once again protect our database and make it pretty much self-managed rather than us having to manually update everything so let's begin all right let me get a piece of chalk this one looks nice I'm getting pretty low this is the biggest piece of chalk I have left all right so we when we create an SQL statement we can add these two key keyword phrases here on delete and on update this refers to the foreign key constraint so when we but it's talking about the parent so when we update the parent we want the for get away you stupid fly all right when we update the parent we want the children to do something when we delete the parent we want the children to do something that is what these keywords mean so these keywords it's talking about the foreign key constraint and it refers to the parent all right so let's just draw some basic tables just kind of keep things I'm not going to give any specific examples yet I'll just kind of draw things out so let's say we have a parent here and as you learned in previous videos the parent is the primary key right and then let's reference this primary key with a child okay let's not draw this line yet and then we have a foreign key this this primary key is a column within the parent and every single row has a unique value the foreign key is a column within the parent and it references the primary key so the say the value of 400 in a row could reference the value 400 in this row in a row of this table you get it I've explained it enough now let's just make another child table so these are both foreign keys that reference the same primary key but they're two separate tables so yeah like we could have a user table and then we could have a a comments table and an orders table for example they both are bought or commented by a user so these foreign Keys reference primary keys so every single value within the table of the children within the foreign key column needs to be a value that reference that is present in the parent column now these these values right here these options refer to the parent so when we delete the parent or when we update the parent we want the same thing to happen to the child or whatever the options are and we'll talk about the options in a second so that's kind of how these work now just to kind of clear things up I'm going to erase these words here just cuz it's getting a little crowded you know I want it to be peaceful all right okay so this is kind of How It's Working foreign Keys point back to the primary key these options refer to the what what happens to the parent now these these options right here these refer what happens refer to what happens to the child okay now it's getting real confusing there's arrows everywhere and like graphs and diagrams and but you'll get it don't worry restrict you might also as no action is uh well at least for MySQL in different database Management Systems uh these might be different but anyways restrict is going to throw an error so if we try to like we can give we can give one of these for each option so on delete we could either give restrict Cascade or set null or null on on delete we could have it uh restrict Cascade or set null just to add more errors you know but let's say we're working with delete right now and we want it to we want to use restrict So within our SQL statement we could say on delete restrict so UND delete restrict and that is going to give us an error whenever the parent is delet delet it so if I tried to delete the user uh with the ID I don't know why I'm writing all that out let's just say the ID of 504 and then this child has a row that has 504 within the forign key column well then it's going to throw an error and it's not going to happen and the parent will not be deleted not going to happen so that's how Cascade on delete works I'm sorry restrict on delete now restrict on update if we updated that parent and change their primary key so let's say we changed 54 and these these children both reference 54 with the four and key and then we change this to 58 and it's not going to work and it will go back to what it was originally because we have it restrict we're not going to let that happen you see all right what about the next option Cascade Cascade will do whatever we do to the parent to the child Let Me Clear yourself a bit this is confusing me all right just smearing chalk all around you know totally helping all right so now if we Cascade on delete that means if we delete the parent we're going to delete the child as well so we delete 504 and boom children are deleted Boom Child deleted so now 5004 doesn't exist at all so like for example if this was a comments table and we had a comment from the user with the user ID of 752 and we deleted 752 the user well then obviously all of his comments by him should be deleted too because we'd have a comment by a user that doesn't exist which does not which isn't supposed to happen so Cascade on delete would do that on update is if if for some reason we updated the uh primary key which obviously shouldn't happen because primary key should be never changing but you still want that protection on your database on update if we have Cascade if we change like 5004 let's say these people exist again I'm just going to erase this cuz I don't yeah okay so these people exist again 5504 504 these referen is 504 and if we update this to 508 well that means all of the children will update as well so now it connects within within different tables finally we have set n and what that'll do is it will basically just set the children as null for that specific value so if we deleted the parent this is just going to get rid of the value the uh row should still exist but the actual foreign key reference it no longer references anything it's empty so there's no it's not referencing anything so the column for that row so like the let's say we have a comment and it's a comment from Billy Bob with the ID of 504 if we delete that we now we're going to have a comment with no poster or no uh commenter at all it's just no value that's what set normal do if we use on delete on update same thing if we change the ID of the parent changed it from 504 to 508 well all of the uh children are going to be set to no value as well all right now there's one important thing when with set null the children have to have they they can't have I should say the not null characteristic we talked about that in previous videos I'm just going to put NN for short if this is not null and we update if we have on update set null and we update 504 to 508 can you even have I been cutting this off this whole time all right we set 504 to 508 I think you can see that one yeah you can if we change 504 to 508 and this is not null it's going to be like we can't do it because we can't set it to null because it has the not null characteristic which means every single row has to have a value for that attribute or that column so I'll give an error and I'll go back to how it was so that's an introduction to foreign key constraints sorry if I talk fast but yeah cool stuff it's important stuff so learn it study it and learn it for your specific relational database management system obviously I'm trying to keep this series Pretty broad so any relational database can benef any relational databas or that's even a word can benefit from it all right so see you guys in the next video be sure to subscribe