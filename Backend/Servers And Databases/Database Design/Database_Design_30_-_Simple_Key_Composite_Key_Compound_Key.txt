hello everybody in this video we'll be talking about simple and composite and compound Keys these are categories of keys so like when you define a database you can say all right this is a primary key or you can say this is a foreign key but you don't have to say oh this is a natural simple primary key like those are just categories you don't have to Define that within our database so these these terms that we're learning are more for design sake so you know the best design for your database but you don't actually have to Define it right like for example this piece of chalk right here you can Define this as a white piece of chalk now what kind of white piece of chalk is it well it's X brand or whatever you don't have to Define that when you're telling someone oh here's a piece of chalk that was the worst example ever moving on all right simple and composite okay so simple means that the key consists of one column composite means it consists of two or more columns this is most common with natural keys because natural keys can be a combination of multiple columns whereas a surrogate key is just a random number one column so surrogate keys are simple composite keys are multiple columns so for example we could have a first name plus last name plus uh email this could be an example of a composite key because this whole group as a whole is the primary key so we could have gim Jake and uh legit or awesome whatever blah blah blah blah blah and then we can have another another one with the same exact name Jim Jake and we could have a different email these two are still separate they're unique because the combination of the three are unique Jim and Jake repeat but the email is different so these as a whole are different values for primary keys so that's an example of a composite primary key the reason is is because it consists of three columns one two three this is an example of a composite key a composite natural key to be specific because we're just we're using things that are already naturally being stored within our database now let's think of a simple key a natural one or username would be a good one because the N uh username can be something that can be used by itself as a key it's simple because it's only one column pretty simple I know all right so I want to talk about another term term you might run into and that is compound okay now I want to clarify that some people and some relational database Management Systems don't clarify the difference between these two composite and compound terms and they just use them interchangeably as meaning a key with multiple columns some some people go a step farther and break these up into two separate terms so we're going to be defining both of the terms but you might see them used interchangeably so don't be so super technical about the details and don't be like correcting people oh hold up that ain't a composite key that's a compound key duh because most people are just going to look at you like you're an idiot and not really care all right so anyways moving on a compound key is basically when it's a call it's a key that has multiple columns and they're all keys themselves so this is a the most common example of this is for intermediary tables so think about like this if we have a a table used to store information about videos we could say it's a video table we could also have another table over here we could have a user table actually here let's let's do it this way we're going to have a comments table okay and then within this comments table we could have a column of what video they're commenting on you see well this is a many to many relationship right so this this uh might not work out well with database design because one user can comment on multiple videos and then uh one video can have comments from multiple people so the best way to do this rather than having two Separate Tables like this we would create video table and then we' have an intermediary table and this would be video comments or user comments you see what I'm saying so we get a connection between the user and the video to create an intermediary table and it's split up with two keys so we have the the user ID and then the uh video ID and then we could have another column for the message or the date or whatever else well you can see if you don't know what I'm talking about go see my videos over designing many to many relationships um but otherwise if you do know what I'm talking about moving on you can see that the entire key itself every user and video ID combination has to be unique that might uh that might be a bad example because a user could comment on the same video more than once so this is probably not the best example um let me think of a good one but anyways this would be an example of a we could add another column in here to make it unique we could have the date and the message so the message has to be unique and the user ID has to be unique and the video ID has to be unique that would be a composite key a compound a compound key uh let me think of an example real quick so a good example of this would be for college we could have uh user we could have a student student table and we could have a class table right so this table holds information about the student this information table holds information about the class now how do we show enrollment should we make columns for every student here no because it's a many to many relationship that means we need an intermediate table between the two so this is a good example sorry about my bad example in the last one but that's a good example of a composite key because the two columns themselves wouldn't be enough so we'd have to add another one which is not a key in itself but for this one we could have a column we we'll name the table uh student classes or just student class whatever you want to call it student classes and within here we could have the IDS student ID and class ID now this combination between student ID and class ID uh must be unique so let's say we have uh the values seven and four um seven and six seven and seven that would work but if we had something like seven and four again we would get an error because CU that's already in there and that's not going to work out so well so the combination has to be unique and these are also both foreign Keys which point to uh another table so both of them are keys and the primary key is compounded because we have the student ID and the class ID as one giant ID or one giant key I should say because the combination has to be unique we can repeat seven on this side and we can repeat like six on this side but we can't repeat the combination of seven and six they have to be unique as a whole so composite Keys that's when you have at least one is a uh is not a key in itself for compound they all have to be keys so for the composite let's look back at the um the examp example we gave in the last one with the videos the video comments let's say this is the intermediary table blown up just so we can see it real big this is the user ID and then we have the uh the video ID well this isn't sufficient to make uniqueness because a user could comment on the same video more than once like if you're replying to comments or something like that so we need another column we could add uh the a time stamp or we could just say uh the time column and this is going to keep a unique time because you can't comment on the same video at exactly the same time twice right so that would ensure uniqueness so we can ensure these three as a whole are unique that's an example of a composite key because at least one column is not a key in itself this is a key because it points to a user's table this is a key because it points to a video's table this is not a key because it's just a column for that intermediary table so that those are the three terms I want to talk about in this video uh one other thing I want to talk about real quick I'm not going to say what the best technique is for this I'm just going to say what some people do with an intermediary table some people will give it a surrogate key on top of the uh compound key so for example with the college keep switching back and forth between examples I'm probably confusing you they might add something such as uh enrollment ID and then we have the uh student ID and then we have the class ID these are both foreign keys and they might use this enrollment ID as a um just a surrogate key for this table although that's not a requirement for uh certain relational database Management Systems some relational database Management systems or Frameworks or something are not going to be able to work well with a composite or compound keys so you might need to have a simple key which in that case you could still have the idea of a compound key this group right here the student in the class can have that index or whatever you want or you can just enforce uniqueness with that but then you can use an enrollment ID so you could have like seven and then you could have student six in the class four and then you could have eight with the student four in class 12 and then you can have nine with the uh student 16 in class 4 and then we could have 10 with uh student 16 in class 12 and so forth that's just an example of what some people do um I'm leaving that up to you and we'll just see what I do up in this other series up in the future parts of this series so yeah hopefully that was useful be sure to subscribe and I'll see you guys in the next video peace