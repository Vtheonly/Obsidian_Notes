yo what is up man long time no see I just ate some bread we are going to discuss the same thing we discussed in the last video and you're probably like why but I just want to go over one more example and then I'm going to be like showing you how to do it it's going to be sweet right so we talked about it in the last video but never actually talked about the join conditions very much so I'm going to go over a new example in this video let's do this so we're going to have a user table not a customer table user table and then we're going to have a comment table and a video table so think of like a video sharing website like uh what's that one called starts with a u i don't know but anyways we have a table here we also have a table here we also have a table right there all right these are all connected right boom boom boom I'm just going to write the name of the table I'm not going to really write any comments in here just because it's low on space so we got the user we got the comment and then we got the video so the the only way the user has any connection with the video is through the comment table because a user posts a comment on a video so I make sense hopefully it does I don't even know why I ask you that still I'm trying to stop it's driving me crazy what are the join conditions for this if we want to do an inner join let's discuss the conditions and also the results we should expect okay so let's just Define the keys that are going to connect these tables so we have a user ID and then we're going to have a common ID and then a user ID and then a video ID and then this video ID will be referenced in this uh table by video ID okay now if you think of this as a many to many relationship between the user and the video you could potentially get rid of the comment ID and just use the combination of user ID and video ID but that is not the best way to do it one user could post multiple comments on one video so you see like uh if we had this comment table we could have user ID and then we could have video ID and then we could have comment and we have the user ID was seven video ID was 106 and the comment was lame and then the user ID of seven video ID of 106 could be JK so this is a bad idea you wouldn't want to use those combined unless you working on some kind of thing where you can only leave like one review on a product the same set of just user review product or user review whatever in that case you could use user ID combined with the product ID or the video ID to allow that but I'm going to use the comment ID in this and this is going to be a surrogate ID that's going to be used as the primary key and these are only going to be foreign Keys the user ID and the video ID they're only going to be foreign keys and they're not going to be part of a compound uh or a compound key in any sort of way they are just another column that's a foreign key referencing a table just so you guys understand the structure of how I set this up all right now there's going to be a join condition right here which basically a join condition is what columns are in both tables right you don't always have to say user ID equals user ID or customer ID equals customer ID or comment equals comment ID you can do other stuff with like greater than less than and all those fancy things but we're just going to be using equals because it's the most common one and it's the easiest to understand the one here it's going to be the user ID so we're going to have user. user ID and it's equal to comment. userid this is the first join condition now for this we're going to have a second join condition between these two and the only thing we can use is the video ID because it's the only thing in both tables so we're basically going to have a comment. video ID equals video. video ID we got to say what table they're in because they're in multiple tables so we have to use the dot syntax table do column equal to table. column I know you guys probably can't even read that I wrote it so small but it's okay as long as you understand this is the join this is the join condition for these two and this is the join condition for these two when you join these you're going to join them by those columns and now what about not n and nle columns what are they going to be returned as well the way we have it structured a user can comment on as many videos as they want so they can be in the comment table multiple times so we got one to many there now now a comment can only be posted by one user and can only be posted on one video because each individual comment is going to be a separate Row in the comment table so for uh video ID we're going to have that set to not null and also for user ID we're going to have that set to not null that's because there should never be a comment that doesn't exist on a video and there should never be a comment on a video that that wasn't posted by a user right now for video we don't necessarily have to have comments on it so there's nothing we need to worry about that just like a user we don't have to worry about having to have a comment so the only time we need to put not null is on these two columns to make sure the comments exist with everything they need you see the user ID would be not n is because every user is a user and every video as a video but we don't have to say every user has to comment that would make it impractical so that's the setup for the notl and um the relationship types so then when we do an injin in this case what are we going to get well I just want to think about that for a little so we can kind of understand what our end result is going to be so what what do we want well we want a table that looks like let move this up little a little bit we want a table that looks like this and that's because we wouldn't want in any other shape right I'm just teasing but basically we're going to take the user with the user ID and likely we'll have more information about them such as their username so if you wanted you could also include that in the uh table which would likely be done from the beginning because you likely do your joins and stuff after that so make sure you put your username in there you don't have to add that in there because then half your users won't have a username and half of them will which isn't good so username from the beginning likely include your [Music] username and then will likely include um the comment so we would need to include the actual comment in the comment table the reason I didn't put these in there earlier because I just wanted to think about the keys for now but now we can put those in there that since we're designing this right and then we also want the um video title and maybe a link but we'll just go with the title for now so these are the three columns that we want to include and we could have uh set it up in a table and each individual row is going to be a new comment well let's see let's think about what can be excluded from this so then we can decide which ones actually will be excluded well let's just ask questions can a user be excluded well if we're using an inner join we're only going to return users that posted a comment on a video so yes any user that did not post a comment will not be included now what about videos will videos be excluded well since it's an injin we're not going to include any videos that do not have a comment from a user so yes videos can be excluded exuded they likely will so videos we're just going to put X by to say that it can be excluded users can be excluded now can comments be excluded well let's think about each individual key we have the you or the uh foreign Keys user ID which is labeled as not null so that means every single comment is going to have a user and also the video ID is not n so every single comment is going to have a video so in this situation all of the comments will be returned so we can't remove those So within here every single comment is going to be included so if we had uh 10 comments we're going to have them labeled one through 10 we actually want to label them but we would have all 10 of them there and then only some users would show up here and all of their comments all the comments would show up in this column so it would be like like it be like like like like and lame and then the video title only some videos are going to be included here Pizza subscribe that's how that's going to work and let's just uh see how that goes so uh yeah let's see this in [Music] action here I have some snapshots of some tables I created and I'll just be illustrating this and I'll be drawing on the screen as needed and I have one of them Wacom tablets and if I am drawing all over the place it's because I haven't installed the software not because I can't write better than a kindergartener all right so let's begin here we have what what would be like a user table or something uh we got the user ID email username and the pass which is like just encrypted basically and um this is going to be joined with the uh comment table over here I mean sorry that's the video table here let me this is the comment table all right so here we got each comment and foreign keys to the user ID and the video ID as well as the actual comment and then we have the video table the video table has the title of the video and also the description which would go like under the video or on the side or appended to the title whatever you want to do for your website and um this is just what the video is about right and as you can see I'm advertising my database design course which is pretty awesome right and what we want to do is we just want to uh join these so we have the username the title and the comment all from three different TBL table so the username comes from the user table right here and then the title comes from the video title right here and then finally um the comment comes from the comment table right here so let's go back to the join table what we want to do is is if we're using let's say the comment table we want to replace the user ID with the username and the the video ID with the title so let's look at the the comment table we want to replace all these numbers in the user ID column with the username which means we have to reference the user table and then the video ID we want to replace with the video name which means we'll have to reference the uh video table and then the comment ID that's just the primary key for this table all right all right so let's just kind of look at how this works so yeah this is how it works the username from the user table the title from the uh video table and the comment from the comment table now let's go through how the join looks I have all the tables here now it's kind of small so sorry if you can't see well but we have the join table right here this is the joined table that's the join then we have the comment the user and we have the video and we're going to basically just borrow some columns so the title that's going to come from the uh video so just going to go over here it's going to come from over here and then the um the username is going to come from up here and then finally we have the comment and the comment is going to come from right over here if you can even see that probably not okay so there's a couple things though not all of the columns uh values are included so not every single row that's because this is an inner join now uh if you look at the username we got all guy Pizza let's follow this user so let's go to the user table we got all Sky pizza right there then we got if we keep going down this table we got ha 12 which of course is um use my mouse now right there then we got Pablo is Al dot dot dot which is Pablo is awesome then we got mil and coup which is milk and cookies and then we got yellow swaga which is Yellow Swag hashtag yellow swag sorry and then we got I don't even know what that says which is this person right here best best speller in the world okay I made these a while ago so so you can see these two people though they're not included that's because it's an inner joint and they are not part of the end result now let's look at the videos so we got the videos we got database assigned 1 2 3 4 5 6 7 where's where's eight though I don't see an eight on here well you can see eight on the video side right here it's not included so eight is not included basically we're taking um different columns from different tables but not every single row is included that's because it's they don't meet the qualifications for the inner join so the syntax for something like this would be like this so I have the select and then the username title and the comment these are all from different three tables but um it might vary on how it looks for your database management system but it'll look something like this and then from the user comment and video table and we just do the inter join inter join the comment by the user ID and the comment user ID and then the inter join of video by the video video ID being the same as the comment video ID so yep that's that guys so thank you for watching and I'll will see you in the next video and um be sure to subscribe even though even though my drawing literally looked like a drunk animal I don't even know just just forgive me for that one my my handwriting is just just awful that's all I can say it's awful it's it's hideous ah ah