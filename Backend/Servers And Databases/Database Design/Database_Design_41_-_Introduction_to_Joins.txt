hey you slacker you skipping class now you need someone to help you through the join process and you're all confused well luckily for you I'm here to help you so this video we'll be talking about joins and in fact the next whole group of videos will be about joins so it's going to be a lot now joins are a complex subject they're they could be confusing and tricky and uh very syntactical I don't even know if that's a word but basically the syntax from relational database management to another relational database management system can be confusing and complex but rather than diving in just learning all that stuff we're going to be talking about the concepts of what the types of joins are and I know you might not even know what a join is yet so you're probably thinking I don't know what you're talking about well that's what we're talking about today so thank you for joining me let's begin so a join is when you take something that's structured in a database in a confusing non- userfriendly way and you're presenting it in a userfriendly way now this is done so that way we can store our data in the database in a way that's the best structured to where we protect our data integrity and it's normalized and separated across tables with the proper relationships and data types and keys and indexes and everything but when we actually want to present that data for example on a web page or in a program or to the um analyzer person who goes and analyzes and does a calculations on our data or just views those calculations after the database does all the work with the analyzation well that end result is often in a way and it looks in a way that uh is organized and structured and makes sense to us that's the purpose of a join so it takes a mess and puts it out in a way that looks beautiful and this can be done over multiple tables so for example we could have a table here a table here and a table here and these could all be three different tables with relationships between the tables we won't get into any specifics of what kind of tables but basically a joint is going to take all of this and it's going to present us with a generated table that is more pretty it's more beautiful and more structured and it makes more sense now the way this is done is using foreign key primary key connections so when we have these relationships between these tables where I drew these arrows here that represents a a a foreign key connection that references a primary key so one of these t tables is the parent one of them is the child and we want the end result to combine them together into one now when you do this these columns that are connected are going to be indexed to make it much faster now uh when you join tables often you'll replace names of things with more userfriendly names so for example we could have you know let's say we had a comment on a website and it says wow lame and then this is posted by uh Caleb well you can see that if you have that username here it it might actually be a user ID in a comment table so for example we could say this up here is the comment table this is the user table and there's a foreign key from the user ID referencing the user ID ID in the user table well we when we present that data on a database we will want to replace that user ID with the actual username so rather than having you know we could have it to where it's like user ID of a 4,582 and then you're like oh I don't really know what that means well since this is all within the comments table now we're going to take information from the user table and put that username instead of the user ID that is how a join works conceptually that's another important thing all this think of it conceptually these videos are going to be helping you understand the concepts of the different kinds of joins and throughout it I'll be giving you some examples of how you would type that in SQL maybe but I'm not going to be getting into the specifics that's because joints are done differently from database management system to database management system so what you just need to know is how the joins work and the expected results and then when you start working with mySQL or SQL server or Oracle database or whatever else then you can just uh figure out how to do their joins you'll already know what the results are going to be because you understand the joins and then you just type it out boom you got a join there now this is one other thing to know that's important is all of this is uh data manipulation most of what we've been talking about before is data definition so that was in um basically ddl but now we're going on to DML so ddl data definition language and data manipulation language these are two parts of SQL we all we all talked about this in uh the older videos but we're on like way farther now so you guys might have forgot this but this is important to know because now we already have the definition the structure of the database the database might already be completely designed and structured with the columns and the rows but now we're manipulating that data to look a certain way so by doing joints you're not actually changing the structure of the database you are changing the presentation of that database that is extremely important to know now you may be wondering why exactly do I need to know this because if I'm database designer or whatever really all I need to do is design the structure of the database and then the database administrator or the software engineer person or whoever can go in there and use my database that I designed and created and they can do all the data manipulation stuff to fit their application right well maybe but not likely that's because the joins are also very important to understand because when you design your database you need to think of it in a userfriendly way and then normalize it make it confusing and then present it in a userfriendly way it's kind of confusing because you start with let's say you really bad at database design and you're structuring a table and you have it to where it's like comments a comment table and within this you have a user name and then you have the the comment and then maybe the blog post or video whatever it doesn't really matter you can have some IDs in there basically you don't know what you're doing and you put the username we'll just go with Caleb C comment lame I got another one from Caleb C cool Caleb C awesome when you look at this and you show it to your grandma she understands it she's like okay she might not understand it but she gets if you explained it she might Caleb C posted the comment lame Caleb C also posted the comment cool Caleb also posted the comment oops Caleb C also posted the comment awesome but this isn't the best way to do this because we learned about data integrity and also repeating data because now we have this in here three times so instead we use a user ID we get rid of Caleb C and we get rid of the username we have a user ID and then in here we have the user id6 ah let's not use that number number 7 77 and then over here we have a user table with the a user ID column which has all of our user IDs for each individual person so we started off with this friendly design but in reality it doesn't work because it's not normalized there's repeating data but it looks pretty once we have that then we can break it up and normalize it so that way we have multiple tables so we have this table and then we have this table over here but that's not the only thing we do the next thing we have to do is we have to take up those pieces of the puzzle and put them back together in a join to get the final result so we basically want to replicate the original table we had here by using a join of our normalized database and recreating it so what we're going to do is we're going to take the user ID column and we're going to take uh the user ID can you guys see that all all good it's over there this this will likely also have a username column so I kind of ran out of room here but username and that usern name user ID is seven will be connected to Caleb C using a join we are going to connect these two tables by basically using this foreign key which points to the seven and finding the associated username with that user ID and our join will look like this username comment and the the name of the table can be I mean whatever you want it could be generated table or it doesn't even need a name if you're just putting it on a website or something and then under the username column it'll be a Caleb C and then Caleb C and then under the comment you're going to have lame and uh cool and awesome but this wasn't just like this to begin with we got the username from this table and we got the comment from this table so not only do you have to design the structure of the database but you have to structure the joins to basically put our database back into simple language or Grandma readable tables okay that that's basically what we want to do so let's say you get a job or you're working for a developer or something and they say okay on my website I want a table on this uh users page where I can sign in with my username password and I can see their username their password their email their uh date they signed up and everything like that and if I want I can go in there and edit it that way they don't have to go in and type SQL you're you're going to have that programmed in the um in the uh actual application to send that SQL but we need to structure the tables we need to make a join that's going to be able to combine those all to one pretty table which that's the job of the database designer likely I mean if the application or the database is huge you might have someone who does the the um designing and then someone who does the implementation and then someone who does the joints and then someone who does this other junk but I mean if you're just working on your own and you got to do everything you're also going to have to design the joints and I highly highly highly recommend you do that before you go in and programming your app application and then you're like oh crap I don't know how to do this or oh my database is structured wrong you want to do this all beforehand don't rush into things because then you're going to be like dude dog my application ain't working right and the reason is because you didn't take the time to structure your database the right way and develop your joints man okay once you got that you're good to go and yeah so there are a couple different kinds of joins there's inner joins outer joints joins cross joins unions there's all kinds of different things that we're going to be talking about and we're just going to be scratching the surface of each and every one so after these uh next group of videos you will be sufficient in Joins you can be like joining good so yeah catch you in the next video and stay in school or or watch my videos one of the two peace out