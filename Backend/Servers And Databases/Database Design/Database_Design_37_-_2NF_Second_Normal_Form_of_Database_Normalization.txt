yo what's up nerds in this video we're going to be discussing the second normal form so in order to put things in second normal form they must already be in first normal form so check out the video I made right before this one before you come and watch this one now second normal form deals with deals with what's known as a partial dependency that's when a column only depends on part of the primary key so in order for it to depend on only part of it you have to have a compound or composite key so basically the the primary key has to be multiple columns because think if you just have one column as the primary key a column can't partially depend on half of it does that kind of make sense I don't know maybe not let's say we just have a random table for people so we have you know the uh persons let's go with um let's go let's just use a person ID and we have some attributes about this person we have their name you know maybe their phone or their pH level uh and maybe their email let's first talk about what a dependency is before we go in and talk about partial dependencies these columns depend upon on the primary key so in this casee this is the primary key and there's a dependency here another way you can think about it is if we have another table about cars we could have a um car ID which is also surrogate key now this person's name it does not have a dependency here you can see this name is only dependent on the person ID not upon the car so this doesn't make any sense here another thing is that uh the person ID doesn't have an unrelated entity or an unrelated attribute about the car ID so such as the car color the car color has a dependency on the car not the person this isn't going to make any sense that's what a dependency is now what is a partial dependency so let's see what a partial dependency looks like using Sur Keys you'll see this when you have a many to many relationship broken up with an intermediary table which is the correct way to design a many to many relationship so let's think of the example of books and authors because if you think about it one author can write many books and one book can be written by many authors so conceptually it's a many to many relationship but we're going to store that in the database as one to many relationship on one side and then one to many relationship on the other side so we get this look and a table intermediary table and then a table so over here let's put the authors so this is the author table then over here we have the book so this is The Book Table and then in between we have the inter intermediary table of book authors or book author so this is the correct way to design it now when it comes to attributes all the attributes about the author are going to go over here all the attributes about the book are going to go over here and all the attributes that have to do with both the at the book and the authors connected those will go in this table so first let's give them some surrogate Keys we'll give this one an author ID we'll give this one a book ID and this one's going to have two foreign keys of the author ID and the book ID and those foreign Keys together will be the key for this table so that's kind of how you would set this up now things about the author go over here so you know their first name maybe their last name maybe their birth date whatever you want to put about the author the book would have stuff about you know the ISBN which is the ISBN is the code on the back of a book you can look up it tries to uniquely Define that book so the exact addition and everything else so you can just use that to Define it um you know we would maybe have the page numbers or the publisher the publisher could be a primary key or a foreign key to another publisher table or you could just have it in that table if if that's how it worked but likely it'd go to another table but we're getting off topic anyways it would look something like this so author information goes over here book information goes over here this is the correct way to design this table because when it comes to dependency the first name of the author has only to do with the author and it has to do all about the author now let's look at things that have to do with both the book and the author we could have something such as the author position now what that is when when you write books often there's a person who has like the first author position which is what the big name is and then you have the second and the third and the fourth people often compete to try to get first author this has to do with both the book and the author because if you think about it if we put author position here that's going to depend on what book we're talking about we can't just put author position one and say he's first on every single book he ever is going to write that doesn't make sense we can't just say author position one on the book because it doesn't say which author we're talking about which author is one it doesn't make sense that's why we have to have it in this table because it has to do with the book and the author so we could say book ID is 17 author ID is 22 and the author position is one so that would say the book with the ID of 17 and the author with the ID of 22 is in the second or the first position on that book it's a little complicated but we combine that to with joins to make it make more sense for uh the actual viewing of the data but anyways this relies on the book and the author ID that's why it's in this table this is correct now an incorrect thing would be something like the ISBN because the ISN has to do with the book only so when you look at this it relies upon the book ID it has a dependency on the book ID but it doesn't have a dependency on the author ID this is an example of a partial dependency now the correct way to fix this in this case would just be to take ISBN and put it in the book table which we obviously already did because I put that in there first when we started but if if you didn't have this table and you're working with just say like one table maybe well then the correct way to do it is to take the book ID the ISBN drag them to another table and then use a foreign key to connect to that table which we already have it structured correctly because we understood how to design that many to many relationship which is why relationships are useful to understand what if you don't have it already set up correctly you'll have to take the partial dependency and move it to another T able and reference it with a foreign key for second normal form you want to First be in first normal form and second remove all partial dependencies by moving the columns as we did here we took that ISBN put it in the correct table now another thing you can think about is if you have a table where there's a primary key of only one column you're already in second normal form for that like imagine it for this how can birth date be dependent on only only part of the primary key which is author ID because there's only one you can't you can't depend on only part of an individual column does that make sense hopefully it does I don't know why I even ask you guys that like does that make sense it's like you're watching like a little kid show yeah so yeah peace out guys thank you for watching and I'll see you in the third normal form video