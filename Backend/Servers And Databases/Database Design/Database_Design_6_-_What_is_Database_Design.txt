hey what's up everybody this video is going to be a quick video right before we start diving into specific database Concepts this is more of a general idea of database design so this video we're going to be talking about okay what is database design I mean we talked about what's a database we never really talked about database design why do we have to design a database what what's so special about it that it needs design it's not like we're building a house or something well in a way it's it's kind of like that it's we're building schematics to build the best database how do you measure whether a database is good or bad well it has to do with data Integrity which we'll talk about that in more depth in an upcoming video so data Integrity is basically where all of your data is correct it's up to date there's no disconnected data for for example if we have two tables and for some reason these tables are connected in some way well if if for some reason this link breaks well then when this table Updates this table gets left behind and then the data becomes incorrect that's a data Integrity problem because the data is not managed properly so with a u good designed database we prevent data Integrity issues so all of our data is up up to dat uh we don't have we don't have repeating data we don't have old data that should not be in there which uh if for example like if you have a database you can store lots of information from like long ago and that's fine but you don't want data that has recently changed and it hasn't changed in the update so you want the datab base to always be up to date unless for some reason you're storing like an archives let's say you have a store and you want to store an archive of every single order you've ever made or sold or whatever well then you can store all that in a database and that doesn't really need updated because it's an archive but if you have if you have a customer in your database and the address is out of date and doesn't update well then you have a problem another example is if uh the person up has for some if your database is designed badly and you have repeating data well then one example of the data can update and the other one's left behind so now you have like two addresses for one person which should just be one address that's another example of a data Integrity problem so we'll be getting into like specific cases of data Integrity problems as we go on but when we talk about data's design database design as a whole people usually break it up into three sections two or three it just kind of depends on like what people I mean it varies from person to person so okay first we have the conceptual and then we have the logical and then we have the physical all right these are all known as schemas or schemas whatever you however you want to pronounce it but uh that's this all right so we have the conceptual schema The Logical schema and the physical schema a schema or just think of a schematic like when you're building something um it just tells you the way the data is structured the conceptual this up here is when we're just kind of thinking about things how things are related we don't think of limitation as in oh we're not going to be able to do that because we only have this much availability or something this is kind of like unlimited brainstorming phase and as we move down this is more specific to where we say okay this is how we're going to program our database so up here this up here is more uh General this down here is more specific once you get down here you have to start worrying about all right what kind of a relational database management system am I going to use but when you're up here you can just kind of think of general concepts how data is related so the farther you go down to the physical the more specific things get I mean that's pretty obvious so rather rather than thinking of it like three steps I kind of think of it as a Continuum we are taking our general ideas and moving them to specific implementations hopefully that makes sense but basically when uh we talk about these individually the conceptual just talks about how data is related because in a relational database management system we have relationships between tables if you think of we have a users table and then we have a sales table and these users can go to this website and buy um products that that's our example here it can be anything but this is just an example well every single sale has to be bought by someone specifically one user so that means there's a connection between the user and the sale so we have this connection here that is part of the conceptual design we say this table the sales depends on the user so that's that's because with without a user we can't have a sale because there's no one to buy the stuff and a user doesn't necessarily have to have a sale so it's dependent this way that would be the parent that would be the child hopefully that makes sense when we get to The Logical we start planning out our table structure so we have all these relationships between data well then we can realize all right we have specifically a user's table and we have X number of columns the username the password the ID the uh address the phone number the credit card information if that's something you need to store uh anything like that then we have another table and it is the the sales so we have the sales table so we have user user table and then we have the sale table and then this this is uh connected in some way so we have a user can have multiple sales and a sale can only have one user that's logical database design because we're actually structuring our columns our data types our relationships we're drawing those out so we have this logical uh drawing or schema the physical that is when we start actually implementing that into a database so when we're talking about just designing and we're not actually creating the database the physical design would be figuring out what relational database management system will work best what are our table types what what server are we going to store this on how are people going to access this is it going to be over the Internet it's going to be over uh computers programs so usually a database will be on a server and this will be accessed by multiple different people that's because the database is like the core of all data for example if we only had this one person using the data well then we wouldn't need this huge database we could just store that information on their computer because they're the only one on there it doesn't even make sense so typically um everything's kind of accessed on a server so the physical would be okay what kind of server were we using how are people going to access our data is it going to use a web form do is that something we need to program and then when you physically Implement that is that that's when you actually program the database build the web form or whatever you are doing uh installing the server and testing building the users who who's going to access it the views what are the different views going to be what data is going to be returned and so forth this is also when you really focus on security because logically when when we're in The Logical phase we're still kind of thinking okay no one's going to try and break it no everyone's going to use the database correctly but in the real world that doesn't work out that way people either they try to break things or they just don't know what they're doing or there's errors or there's incorrect data well that's when somewhere along this Continuum right here is when we need to start worrying about security we don't want people breaking into our database and we don't want our database to fall apart have data Integrity issues so hopefully that clears some things up so the database design just to sum things up real quick database design is using skills that you know to build a database that is not going to have data Integrity issues update anomalies we'll talk about those too but that's basically when for some reason you're storing two of the same data like if if my address is on in the database twice well that that's a problem because when I update my address only one May update for example and now the address says I live in two different places that's that's wrong so a database design is a method to separate information over multiple tables rather than having one huge table like this where I store my address we store our sales we store our our customers we store our our uh favorite video games we store our relationships with uh yeah you get so basically this is a bad design because it's all in one table and when when I have to update it so we have let's just say this is a row right and I have the columns are ID and username and then we have us this is going to need to be a little bigger and then we have username we have address let's go phone number it's easier phone and then we have favorite color when we store like this well if we need to put a new favorite color we have the id7 that's me we have the username Caleb CK we have the phone number uh 800 dot do dot dot dot favorite color um camo and then if I want to put a new favorite color in well we can't because we don't want to we already put one in there so we need to create a new row say seven Caleb Curry 1800 dot dot dot and then favorite color green no no no no red well now we have all this duplicate data we have this in here twice we have this in here twice we have this in here twice and we have we have to have two rows for favorite color so you're you have to find a solution to this problem but now if if I decided to update my phone number because I got a new phone number well now I'll update it and I'll change it to one two three four five six seven eight nine Whatever It Is Well now I updated my phone number but for some reason we have a data Integrity issue because my phone number is in here two different ways that that's a bad database design and in this series we're going to be talking about fixing problems like that and the best way to do this would be to like separate it into multiple tables plus you probably don't need to store your favorite color unless you're running some kind of like art website or build business so so it's possible but we can do the same thing with um like orders how many orders if I had to put my orders in that table which is another bad idea we have the same data Integrity issues so this series is going to talk you through getting rid of those data Integrity issues so you have the best database design for best performance all right sorry for rambling but that is all I have to say so please be sure to click subscribe and click like below thank you guys and I'll see you in the next video Woo what