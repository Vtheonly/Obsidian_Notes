hey everyone welcome back in this video I want to talk about lookup tables let me write that out for you so you can see it look up tables so what is a lookup table let me I have to kind of explain something else first before we're going to get into this so just kind of relax and take a take a good look I'm going to erase this so I can have some room so let's say we have a membership table or membership database and we have a user table or members table and within that we have like a membership status okay and let's say there's uh like 10 options I guess so you could have like bronze silver gold Platinum titanium and then like not a member or like trial member or uh partner or special member or member above all members I don't know I'm just kind of making stuff up anyways some people will create what's known as a lookup table so they'll have a table over here with every single option for the membership so we could have the memberships and then within here we would have have each individual row is one of the membership statuses right so we have like one two three four five six seven eight nine I'm just going to go with nine because can't fit anymore nine individual rows and then we so that's one column the ID for example which I mean we could use a different key if we needed but for this we'll just use an ID and then we have a column to say what the membership status is so we could have like gold silver bronze platinum and so forth now we can have a members table and then a call colum within this member uh table can reference the key of the membership so remember like one or two videos ago I talked about how Keys make connections between tables well this is how uh that's done here's an example of a connection using a key what we would do is we would have like the member the members uh user member name or their ID for example and then we have their first name last name name address phone number uh billing type whatever it is and then we would have a column membership you see and within here let's just say for example we didn't have this table this was gone we just had this member table well when we have 6,000 rows within here the membership type would get repeated lots and lots of times we would have like gold gold gold gold bronze platinum Platinum Platinum bronze gold Platinum bronze and go on go on for all of the rows and that would work that's that that is a possibility for your database I'm not saying it's going to cause your database to explode or you'll get fired or anything well unless you're told not to do that you might get fired that's a possibility for the database design now let's think what kind of relationship is this one member can have one membership and a membership can have multiple people having that membership so it's a Ono many relationship the on side is the uh the membership you'd have one of these and then you would have many people using that so that means if we if you remember from the relationships we need to take the key from this one and put it over into this table and now if we add this new relationship in we don't have all of that repeating data because all we do is reference one individual row and there's some other benefits to that which I'll explain in a second so now we could be like rather than gold gold gold silver bronze platinum we could have one one one two three four for all of our rows and we'd still have individual information like Caleb Jimmy Jake Sally Sammy and Sarah well when we do this little connection thing we have a new connection between these tables we're taking the key of the membership which is this column right here so here's our key and we are taking that key and we are moving it over into the member table so now this column right here within the member table points back to the key of the membership table this is known as a foreign key now this will help protect the Integrity of our database that's because there's only nine possibilities for the membership and if someone puts something else we could flag an error the other thing is we can have it to where it will not accept an empty value and then if for some reason we decide to change our like let's say we wanted to change silver to like I don't know Diamond well then we could change it here and because this value is not over here it's only a reference it will automatically figure it out because you see the key never changed the key is still one so one still points using one so this connection is still here the value oh I'm sorry I guess I should have been two whatever you get my point though uh we can change the name of gold we can make it epic if you want epic membership well now we didn't have to change six 6,000 rows within our member table we only had to change one row within our membership table and all these connections stay the same so the IDS help create better connections between tables requiring less maintenance for our database and it also protects our integrity because we don't have to worry about incorrect values within the membership because it's all connected back to the membership table which we change from here so when we update EP it updates every single instance of Epic within our entire database or it gives us an error or something we can set it using what's known as foreign key constraints F key foreign key uh constraint so because we're using what's known as a relational database which is the type of Designing we're doing right now we have relations tables and everything is connected across the database it's not all stored in one individual table but to protect our integrity of our database we create connections between keys that way we don't have to worry about incorrect data so what do Keys oops I dropped my chalk what do keys do for us let's write it out well first thing they protect our integrity I made a video over Integrity so if you want to check that out be sure to do that so they protect our integrity how do they do that well we don't have to worry about only some values updating if you remember we had the members table and when we updated gold and we named it epic it updated every single row within the member table so it protects all of our values so it updates less maintenance for us less incorrect data what else does it key do keeps everything unique and you might have saw that in the member table we used the the uh key number one multiple times we had three people with the member ID I'm sorry the um membership one so three people had gold for example well it's still unique because they're still only talking about one individual gold over here in our membership we had gold was one of the options we could have three people all right you see oh forgot our arms these three people can all have a gold membership and it's still unique because we're only talking about one individual value with three references to that value if we got rid of these foreign keys and we just had to say what membership status they had well now this guy's going to be gold this guy is going to be gold this gal is going to be gold so now we have 1 2 three times that gets rid of the uniqueness from the key so it protects our uniqueness it improves our speed so basically a improved functionality of our database I'm just going to put function I'm running out of room and it does a whole bunch of other things um basically it makes updating easier so less work for us because we don't have to go through manually and check every value we can just update that individual value you know the other thing is it allows for added complexity H this is a long one oh my hands getting tired okay I D you can even see all that okay so here's just some examples I'll see I'll show you how we could say it allows for added complexity let's see I'm going to redraw the example we had but I'm not going to draw super in depth so don't don't wait I mean don't worry it won't take that long we added members and then we had the membership all right now let's focus on this me membership table let's make it a little bigger actually what we had earlier was we had an ID we had 1 2 three four and so forth and then we had the title of whatever they are so if you wanted to draw this better you could put the column headers so we could have like ID and then we could say name of the membership and then we could title the table we could have it membership uh membership yeah so forth well what we can do we can have added complexity because now we can add a new column and we could say more about the gold membership so we could say price and we could have a monthly price of $60 for example if we didn't do this whole lookup table thing and we put it all within our members table let's see how that would look let's try it all right let's have the members table and let's not even have a membership table well now we have the guy with the ID 7 89 and three and we'll have their names be [Music] Caleb uh Tommy Tracy so those are those three people I was talking about with the gold memberships well what what membership do they have we got gold gold and gold now how much does that cost them 60 60 and 60 just with this little example of three people we already have four unnecessary values because we have repeating data we have G and then we have G twice more we have 60 60 twice more that eliminates the functionality of our database because we're having tons of repeating data so you might think the best way to do this is get rid of this price well now we get rid of the complexity of our database and sometimes complexity is a good thing because it allows us to store more information when we use the common or I'm sorry when we use the lookup table we can just have that as another column and we could put more things we could have another column saying how long does this membership last we have another column saying U I don't know special perks or what can you use within our gym or what can we use and are we allowed to bring friends what's the price for friends we could do all that kind of stuff within this table and just reference that within the other table it's only a set number of options so we reduce the repeating data if we wanted to do it all well we'd have to put each individual com column and we'd get tons of repeating data you know what I mean yeah so that is an example of how because that would take forever so that's very common it's common for things with a set number of options so like membership type there's only so many options you can have States sometimes sometimes people do it for uh sex mail or female uh some people do it for I can't think of anything else right off the top top of my head but anytime there's a set number of options they will often put a lookup table with the ID the name of that option or what that option is like gold silver bronze or male female or uh California all the other states Wyoming uh Texas uh Russia I'm kidding well then we only have a set number of options so that's that's the ex uh then we could put more information about it we could say uh May and then like what the mail is allowed to do on the website or anything that allows for extra complexity for our database so I know this video is like 60 Minutes long and I was rambling a ton but hopefully that cleared things up completely and yeah that's all I have to say so I'll see you guys in the next video be sure to subscribe