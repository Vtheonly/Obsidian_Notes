hey what's up everybody in the last couple of videos we've talked about all of the characteristics of keys in general we talked about the word key in databasing keys are the key to success anyways this video we're going to be talking about specific kind of keys because all of the last videos were kind of Concepts but now we're going to be talking how do we actually Implement that into a database I understand that we want keys and we want references from table to table and we want it all to be connected but how do I do that well the main two types of keys that you're going to hear are known as primary and foreign and actually we're not going to be talking about these two kinds of keys in this video surprise we're going to be going a little bit broader more a little bit more broad so when you're like a beginner and you're learning database design you'll probably learn that these are the two kinds of keys when uh when you want to learn more advanced database design you'll learn about different categories of keys so before we get into these two which if you guys haven't heard of those just hold up if you have heard of those keep holding up we're going to be learning about what's known as a Super Key now for some reason I think this is one word with no space and I don't know why there's no space there so if someone knows if like one of you guys watching know let me know because I really want to know it's driving me crazy the other one that we're going to be learning is candidate key all right so before before we learn about the candidate key let's just focus on the super key so I'm just going to erase this all right so what is a Super Key Well a Super Key is any number of columns that forces every row to be unique now if for some reason your table is structured to where you can't have every single row be unique you need to consider adding some kind of column to enforce uniqueness such as an ID or some um you need to make sure that everyone using the database understands how that table works if it's a special case but generally every table you will be able to make unique now when you work with databases you'll often see IDs so like user ID this is a type of key then you also will sometimes find Keys such as like username the difference between these is that this one's kind of just made up for the sake of the database user ID of 748 what does that mean absolutely nothing it's just a number username actually has some real world connection we'll be getting into the difference between these in an upcoming video and which one will be best to use for which situations but as for now uh we'll just be using kind of natural practical uh columns that are already in the database rather than IDs but the same thing can apply with just like an ID field or a column so let's learn about the Super Key super key it's like Superman but it's a key just like a giant key that just goes and breaks through doors doesn't even use the handle it just breaks through doors anyways let's learn okay let's say we have a table here big table right now I'm going to put some columns in this table that is not straight enough for me close enough now it just looks worse whatever let's say we have a uh user table because I always think that's the absolute easiest thing to use and we're going to have a username email password uh then we're going to have first name middle name last name and then we'll have birth date so every single row within this table is going to need a value for each one of these columns I know this is really bad handwriting but it doesn't really matter how it looks just understand the concept there now it looks a lot better I know you're welcome now you can actually understand what's going on okay some instances for databases you will allow people to put in blank values so for example if uh someone doesn't have an email for example we could make it optional that way some people have null or no value at all other people have values but for this this case I'm going to say everything is required because let's say you use your email to sign in or to verify your account dang it always drop my chalk how do we make sure that every single row is talking about one entity and every single entity only has one row everything is unique if we have a person draw a little guy over here right and he wants to sign up for this website so he goes to this website here's his website he puts his information in and that information goes into a table right he does he probably won't actually have access to the SQL because if just some random user on your website has access to your database kind of got some security problems but anyways uh what's going to happen is he will be entered into this and all of his values will be put into these value spots so we have a username make it CC email CC blah blah bl.com pass is pi first name is Caleb real name Daniel last name Curry birth date [Music] 0213 uh 90 so this guy inserted all that information within this database and if you can't read it doesn't really matter now when another guy comes or let's say a gal so this lady comes and she's all like oh I want to sign up for this website so she signs up for this website and she puts her information in and this also goes in the database as a new row so this is just the column headers this is separate from the actual data the rows though they have individual values she can put her values in I'm not going to write them all out because you guys get the point how do we know that each individual row is unique and that talks about one individual entity in this case a user typically whatever the entity is is what the table is titled so the entity would be the user how do we know that every single row is talking about only one user and every user only has one row the rule of one we don't want Caleb to be able to come in here create a new account and make his username CC and all the same stuff again now in some instances we may be able to allow them to make more than one account like I could make an extra YouTube account if I really wanted to that would be okay so I could have the same uh a different username a different email same password same first name same middle name same last name and the same birth date the only thing that changed is a username and email now the def like what the table is trying to Define has kind of changed we're no longer trying to define the person we're trying to define the user account because now there's two accounts and they're completely separate entities hopefully that kind of makes sense but you don't really need to worry about all those specifics I'm getting completely off topic so what were we talking about 10 minutes ago I think we were talking about super Keys it's any number of columns that forces every single row to be unique if you take all of this information and compare it with another let's let's create a new row let's say this lady here actually ended up putting your information in her username is a her email is B password C first name is hi middle name is Yo and her last name is hello and she was born 16 uh 72 that is her birthday well now if you compare these values it is it is uh they're they're different not every single individual value has to be different for example this girl's last name could be Curry and that'd be perfectly okay but all of the values as a whole have to be different so if for example someone came in here and put all of this information up here down here CC CC at blah blah blah Pi KB Daniel Curry o02 1390 that is not a unique row and it would cause an error so the Super Key could be all of these columns right here now super keys are usually not defined within the database that's because they're so broad you have all this information of course it's going to be unique simply because you can only use a username one time typically the email is only one time so if someone comes down here and tries the username CC well then you already got an error it's not going to work so all this extra columns are here kind of unnecessary because we could simply do that same thing with just the username so a Super Key is any number of columns that creates a unique Row in unique rows a candidate key is the least number of columns uh where did I write that can you see down here yeah okay we're good so a candidate I'll explain why it's called a candidate in a second or in the next video or something a candidate key is the least number of columns so for this example we're not going to allow two people to have the same username we may allow them to have the same email we may allow them to have the same password first name middle name last name and birthday but not the same username because then how do you tell them apart you can't because all of their information is the same they're exact clones to the database and we do not ever want that within our database typically I can't really think of any examples where you would want duplicate data but okay anyways the candidate key is the least number of columns needed to force every row to be unique in this example the username is enough to make it unique so we can take the candidate key and have it to be just the username or I guess we could Circle the column because all throughout the uh the rows are going to be unique so the C the candidate is least and super key is any all right now when it comes to database programming let me clear this up so your brain doesn't explode anymore come takes forever want a time limit here guys see they're going to stop watching all right now that I just got my chalkboard to listen to me and erasing stuff when we're talking about database programming there's not really a Time we're ever going to tell your database that this is a Super Key because super keys are not practical they are for designing your database only when I looked at that column first thing I do is I think Super Key yes every single row can be unique that's the first check so you you ask can it I'm can each row be unique that's the question that's to Define that's what super key is questioning can each row be unique and even better word can every row be unique because every single row within a table has to be unique that's what the super key is asking once we figure that out if it can be unique then we move on to figuring out the candidate key so now we ask how many columns are needed can you read that hopefully so first question can every row be be unique yes that means we have a super key that's all we have to worry about we don't have to we have to figure out which columns or anything like that can every row be unique always think about all the possible values is it possible for a duplicate if it is H you got to figure something out if it's not you're good so every row can be unique yes check move on how many columns are needed now you figure out the least number of columns needed in order to create unlimited uniqueness forever so no possibility of uniqueness and we are allowed to put some kind of like limit we can put a unique we can use the it might be different from for a different relational databases but if we use a unique index for example every single column I'm sorry every single value within a column has to be unique and that's that's a requirement for people to put in so if it's not unique we give it an error that's how we force values to be unique so how many columns are needed once we figure that out we have what's known as a candidate key so in the last the last uh example it was just one because we could use the username now the next thing I like to figure out is how many candidate keys do I have I'm just going to use uh CK for candidate Keys how many CK do I have what does this mean well we can actually have more than one candidate key in the last example we had a username we also had an email okay well email could also work as a candidate key because you could put a requirement that every account has a unique email some websites are cool with people using the same email more than once some websites aren't usually they're not so there might be a chance where we have more than one candidate key or if rather than using the username you want to use something else you could have it to where uh we could have let's say you can use your email one once we could have first name plus last name plus middle name or middle initial so that eliminates most possibilities of uniqueness but there's still a possibility that people have the same name so then you add birthday so now you have to find someone with the same first name last name middle name and the birthday uh very rare still possible so then we could add a third oh I guess one two three a fifth column we could make it email or we could do something such as address all right let's yeah let's go with address this could be a candidate key because we have first name last name middle name birthday and address they all have to be unique as a whole what are the what are the chances of a person living at a certain location born on a certain day also the like what are the chances of two people having the same name same birthday and living at the same place unless you had twins and you named them the same thing and if that's the case shame on you just going to confuse people that could be a candidate key now is it the best candidate key probably not because using five columns and it's still technically possible to have a duplicate but very very very rare all right so how many cada keys do I have you you figure them out I like to write out the possible candid keys and then we move on to the next step which is defining the key that we will use for our table once we have the candidate Keys we can choose one of them they're called candidate because there's there's an options like you could have you can have your first candidate key you could have candidate key one you have candidate key 2 and you could have candidate key three this could be the username this could be the uh email this could be that long first name last name password blah blah blah or whatever you want it to be now you have to decide which one will be your primary key which is what we'll be talking about in an upcoming video so be sure to stick with this series sorry this video was super long man these videos are just getting long not sure if should like cut them in half or just continue talking about subjects so let me let me uh let me know what you guys think if I should split videos up into shorter pieces or like I could have broke this up into Super Key and then candidate key or if I should talk about big Concepts like this because this video is almost like 20 minutes long so yeah thank you all for watching and I'm hoping that this video was helpful if not or if you're confused about anything just leave me a comment and I'll be sure to try to help you Thank you And subscribe