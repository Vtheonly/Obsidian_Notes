hey everybody welcome back uh this video will be a summary of all of the relationship garbage that we learned and basically this video is just going to be like all of it in one and it's going to be awesome and it's going to make a whole lot more sense after this so the very first thing that you need to realize when it comes to relationships is that there's not always a defined relationship for every circumstance and it's sometimes you have it's something that you have to decide on your own so in my old database design series which if you want to check that out uh just go to my YouTube channel a lot of people were confused about okay is a student to class is that a one to one or one to many or a many to many relationship well that's something that you're actually going to have to decide on your own sometimes so you have to think logically about the application of the relationship so let's think of the example of a class and a professor what kind of relationship is that I don't know let's try to find out so we have the class and then we have the professor people would ask me like okay what kind of relationship is this well it depends on the application if it's I mean it can literally be all three it just depends on what you need for your application if it's a onetoone relationship that means a class can be taught by one professor and a professor can teach one class if it's a on to many relationship that means either a class can be taught by one professor and a professor can teach many classes or the opposite a class can be taught by many professors but a professor can teach only one class or it can be a many to many relationship a professor can teach multiple classes that that can be taught by multiple professors so it depends on the college cuz some colleges are going to allow a class to be taught by multiple professors other colleges are not going to allow that so that depends on the application of the database if I'm building a database for a college that does allow multiple professors for a class that means it's a many to many relationship because many professors teach many classes many classes are taught by many professors right so when it comes to designing one to one one to many and many to many I'll show you how to do all three of those for a class to Professor all right so if we have one to one we could have for example we could have uh the professor right we could have a professor table I don't even know how to spell we'll just put Pro uh I don't know if there's two FS I don't who cares Professor table right if it's a oneto one relationship we could have the professor ID the uh name of the professor and then we could have a class that's the class that they teach and it's the only class that they teach that class is only taught by that Professor that was that's how you store a one toone relationship and typically you're not going to do that with another entity when it's when it comes to like a name you typically will do that because the name is just assigned to that person a class can generally I mean typically professors can teach multiple classes unless you're some kind of adjunct teacher but class in this case is a one toone relationship if we wanted to make it a one to many relationship well then we would break off class here get a new table class we'd have a class ID and here we could put more information about the class so we'd have the class name this is the most common way of storing information on two tables you very very rarely store a one toone relationship over multiple tables but it is possible we talked about that earlier and we'd have class name and then we could have more information about the class and then we have a forign key class ID that would make this the parent because class ID points to class class ID if you wanted this to be the parent well then we would switch that we would make Professor ID which would probably the most logical way to do that but you have to keep that in mind because it can be a one to many Direction a one to many this direction or it can be a one to many this direction and obviously typically the class is going to be the many side because a class can be taught by multiple I mean a professor teach multiple classes that means the professor is on the the one side the many is the class which means we need to give the professor ID on this side so the pro the pro ID is a foreign key referencing the pro ID in the professor's table that is how you draw a one to many relationship this Direction one to many parent child now if we wanted to make that a many to many relationship we'd actually have to break this up even farther into three tables so now we have the professor's table and then we have the class table and then we have the um probably class Professor table which is the inter intermediary table so we have this table here this table here this table here this these all this will have an ID Professor ID and this will have an ID class ID then you reference this in this intermediary table where we'd have Professor ID of like six with the class of seven Professor ID of six with a class of eight which is basically saying this professor with the ID of six is teaching two classes now uh when it comes to IDs for this table this whole uh thing can be an ID in itself or if you want you can give it a new ID to say class Professor ID and that's kind of unrelated so that's pretty much we'll get into that later but that is pretty much the sum of design ing relationships one to one is typically in one table one to many is two tables with the child having a foreign key pointing to the parent and then a many to many has two two uh parents with the intermediary being the child pointing back to both of the parents hopefully that is all crystal clear and awesome because now you literally know how to design every uh binary relation ship in database design and by binary I mean a relationship between two tables so you can have a binary relationship which we talked about there's one to one over two tables there's one to many over two tables and there's many to many over two tables logically but then we have to break those up into the best way to to store those to store those in a database but this is basically binary because we're talking about two entities a class and a professor a student and a class you can have um relationships between multiple tables but that is something I'm sorry multiple entities but that is something we will have to address in a future video so yeah glad you got to understand all that so thank you for watching and I will see you in the next video where we will be diving into I believe keys so yeah that's going to be sweet so I will see you then subscribe