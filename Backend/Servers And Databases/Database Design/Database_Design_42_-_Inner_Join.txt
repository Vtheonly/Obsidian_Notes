yo yo yo yo yo yo yo yo yo yo yo yo yo yo yo what's up people this video is gonna be talking about inner joints so I'm going write that on the board just so people can see it yeah that's an inner joint okay so the way an in the way an inner join works is it's going to take one table and another table and then wherever there is rows from this table and this table that are connected it's going to present them in a new generated table so let's just break this down and see how it works let's go with an example right CU you got to use examples we're going to have a customer table we're also going to have a card table so think of like a bank for example you're going to have customer table where you're going to put all your customers in there and then you're have a card table where you're going to put every single card that's been given out or will be given out to people who have credit cards or you could make it to where you can even include debit cards in there but we'll just worry about credit cards for now so basically we're going to draw this out and we're not going to have it required that a card has a customer a customer has a card so neither of these columns are going to be labeled as not null so basically the card does not need to have a customer and a customer does not need to have a card so we' have one table over here and another table over here and generally this would be designed as a one to many relationship cuz one person can have many cards and usually one card is owned by one person you could design it as a many to many relationship where you could can joint own a card or multiple people can own a card but H you can modify the examples as needed so let's say this is the customer customer and this is the card table now we might have something like of course we're going to have an ID for the customer so we're going to have the customer ID you know their first name last name um their address their date of birth all their personal information that we need forther data for the bank that's where that's going to go over here we're going to have a card ID and then we're also going to have a customer ID and because this is a on Tom many relationship we have the child and the parent if this was a one toone relationship we could have it to where there was also a card ID in the customer take table if we wanted but I'm not going to do that and we can get into one toone relationship design best practices in another video but for now the customer ID is going to reference this customer ID and here we can also have more information about the card we could have the uh the total amount or the uh limit max amount I guess I could say max amount uh you could have monthly bill and because this is a really simplified example we don't really have to worry about other tables such as um you know bills and U invoices I mean and all that other junk we're just keeping it simple here and let's say this is how we structured our database and we want to make it more user friendly with a join to where we join information across the table because we don't want to have to have the customer ID for the card so we cre create a join and we make this new generated table I don't know why I made that like Circle but oh well and within here we could say we could say it's the uh card customer for example it doesn't really matter what we give the title of the actual table and what we're going to do in here is look we decide which columns we want to take well first thing we we always start with the ID because that's how things are going to be joined and we don't necessarily have to return that ID within our table but we need to think about it because that's how we connect the tables so generally the the ID is just for the database's sake it's usually not something you use outside of the database it doesn't have any real world value so we usually don't need to record it in the join for a viewed application or uh whatever we're using this for now if you're the database administrator and you want some more um presentable tables like this but you want to keep the IDS in there that's fine too but we're not going to we're not going to return the customer ID there's no need to it's just a number but since it's in both tables if we did join it down here it would only be in one column so we would have you know C customer ID and that's going to take the combination of these we're going to have the customer ID like let's say 62 and then card ID be like seven and then customer ID 62 and card ID 8 so that's kind of how that would work but we're not going to return those so what we're going to do is we're going to return uh just the first name last name and we're also going to return the uh um let's add another column amount paid so basically that's saying like how far they paid off their credit card bill let's say you borrowed 10,000 and you owe 6,000 you've paid back 4,000 so far just to see how far people are getting to paying off their bills and like I said this is a very simplified example you could make it to where it gives a percentage and you could have more tables for bills and invoices and all that junk but just so you guys understand the join concept it works the same for basically any columns you use So within here we could have first name last name and the amount paid these are our columns within our table I'm just going to open this up so we can write some and we could say that we have individual people we could say um Caleb Curry and then his amount paid on one of his cards is 2200 then we also have Caleb Curry and uh the amount paid is 720 and um if you wanted you could go in an edit the join add a max amount so that's basically or um we could have a call on here such as um amount owed and we could have that in here too and that would basically say how much they paid out of how much so it look like uh within here we could have amount owed like 3,000 which is basically saying 2200 out of 3,000 if you wanted to do that you could do that but for Simplicity sake let's keep it like this and then we could have uh Jimmy John and the amount paid could be uh 2800 and so forth you could make more rows if you wanted now you're wondering okay what's an inner join we talked about that earlier well basically an inner join is going to take only the rows that either a card has a customer and a customer has a card where they intersect so this new table this joined table is going to eliminate any customers that do not have a card and it's also going to eliminate any cards that do not have a customer so I'm going to erase this I'm just going to draw a little illustration um to show you how this works now um You can find more pictures like this online which I'll link to in in the description if I can remember think of it like this here is the uh left table which was the customer and here is the um card table and this part in the middle this is kind of like the join table or where they intersect so here are the customers that have a card and here are the cards that have a customer so Within here this is going to contain all of the rows that have a customer that also owns a card or a card that is owned by a customer so if you have a card with no customer it'll stay out of the end result and if you have a customer with no card it'll stay out of the end result so this is what you can think of it as all of these things within this um part of the VIN diagram or whatever that's going to be returned now there's different kinds of joins where it'll only where it will only return for example this side or this side but that's where we're going to be getting in in future videos so if you want to do a left joint or if you want to do a left join and go on here or a right join and go over here but an inner join is just the intersection of both of the tables I don't know I have this habit of just like wiping it off with my hands and then my hands are like dark green so I'm trying to be a little more civilized you know so how do you do this well it's done within a select statement because remember we are in we're using data manipulation language which is done through selects so it would be something like this now to warn you um the syntax is going to vary a lot from relational database management system from relational database management system but the concept stays the same so you just got to replace a couple things insert a couple things boom bada bang you got a new joint so we're going to say select and then whatever comes after the select I'm going to scoot this over some everything that comes after the select is going to be the columns that we want in the joined generated table so in the last example we had first name and then we also had the last name and we also o had uh what was it amount paid I don't remember but something like that so that's going to be the columns we want returned then we are going to say what table are we getting these columns from so we do from and then we say okay well you may be wondering well there's multiple tables so how do we know which one we going to use well we're going to put the left one first which in our drawing we had the user or the customer and then we had the card so we're going to put from customer and then you're going to do a join and join the other table to the customer so we're going to say interner join and then you're going to say uh the other table which was card now what you're going to do is say how are these tables connected so the way we had them connected or the way we want to join these tables is by the foreign key connecting to the primary key and the way you signify that and the syntax would be with this little statement here on which is basically saying what are we joining it by and you're going to say customer do customer and what's that what that dot is is basically saying the first part of this is the table the second part is the column the reason we have to do that is because both tables have a customer ID and then you're just going to connect that to the other table by saying equals uh card. customer ID now that's basically all you have to do for this it's going to connect if you look at the syntax it's going to connect here let me get a different marker here colors makes things so useful right going to use black okay we got the customer joined with the card those are the tables and then we're going to say what columns we want to return in the new join and that's first name last name and amount paid and then we have to say how they're related that's the customer ID of the customer table is equal to the customer ID of the card table and that's how you get your joined result so the end result would of course look like this and you're going to have first name last name and then amount paid there you go so that is how an inner join works the next thing we're going to be talking about is left joins and right joins and all the other cool kinds of joins main thing though don't worry too much about the syntax if it's overwhelming just worry about the concept understand that if you do an inner join it's going to exclude all of the rows from either the left or the right table that aren't in both tables it has to be in both tables in order for it to work that's the most important thing to understand when it comes to these joints because if you understand that all you got to do literally is look up let's say you're using MySQL just look up MySQL syntax inner join and then you're going to get a little syntax code replace the columns they gave you with the columns you want and the tables with the tables that you want it's really simple so you don't really need to like yeah obviously you should learn this in the long run but if you're new to this don't worry about diving in studying that for 20 years worry about the concepts because once you get the concepts it's easier to pick up on this junk so yeah peace